
Manipulator_HL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f48  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004008  08004008  00014008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004040  08004040  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004040  08004040  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004040  08004040  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004040  08004040  00014040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004044  08004044  00014044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  08004054  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004054  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dca1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c08  00000000  00000000  0002dcd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  0002f8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00030568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000107f2  00000000  00000000  00031148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e702  00000000  00000000  0004193a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00067bfb  00000000  00000000  0005003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b7c37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d6c  00000000  00000000  000b7c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ff0 	.word	0x08003ff0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003ff0 	.word	0x08003ff0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc82 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f840 	bl	80002ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fa40 	bl	80006b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f9dc 	bl	80005ec <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000234:	f000 f88c 	bl	8000350 <MX_ADC_Init>
  MX_TIM1_Init();
 8000238:	f000 f900 	bl	800043c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800023c:	f000 fa06 	bl	800064c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <main+0x80>)
 8000242:	2100      	movs	r1, #0
 8000244:	0018      	movs	r0, r3
 8000246:	f001 ff0f 	bl	8002068 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800024a:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <main+0x80>)
 800024c:	2104      	movs	r1, #4
 800024e:	0018      	movs	r0, r3
 8000250:	f001 ff0a 	bl	8002068 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <main+0x80>)
 8000256:	2108      	movs	r1, #8
 8000258:	0018      	movs	r0, r3
 800025a:	f001 ff05 	bl	8002068 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800025e:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <main+0x80>)
 8000260:	210c      	movs	r1, #12
 8000262:	0018      	movs	r0, r3
 8000264:	f001 ff00 	bl	8002068 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 8000268:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <main+0x80>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	22fa      	movs	r2, #250	; 0xfa
 800026e:	0092      	lsls	r2, r2, #2
 8000270:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1000);
 8000272:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <main+0x80>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	22fa      	movs	r2, #250	; 0xfa
 8000278:	0092      	lsls	r2, r2, #2
 800027a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1000);
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <main+0x80>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	22fa      	movs	r2, #250	; 0xfa
 8000282:	0092      	lsls	r2, r2, #2
 8000284:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1000);
 8000286:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <main+0x80>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	22fa      	movs	r2, #250	; 0xfa
 800028c:	0092      	lsls	r2, r2, #2
 800028e:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_UART_Receive_IT(&huart3, &byteRead, 1);
 8000290:	4904      	ldr	r1, [pc, #16]	; (80002a4 <main+0x84>)
 8000292:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <main+0x88>)
 8000294:	2201      	movs	r2, #1
 8000296:	0018      	movs	r0, r3
 8000298:	f002 fd6c 	bl	8002d74 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029c:	e7fe      	b.n	800029c <main+0x7c>
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	20000068 	.word	0x20000068
 80002a4:	200001b8 	.word	0x200001b8
 80002a8:	20000134 	.word	0x20000134

080002ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ac:	b590      	push	{r4, r7, lr}
 80002ae:	b091      	sub	sp, #68	; 0x44
 80002b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b2:	2410      	movs	r4, #16
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	0018      	movs	r0, r3
 80002b8:	2330      	movs	r3, #48	; 0x30
 80002ba:	001a      	movs	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f003 fe8f 	bl	8003fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c2:	003b      	movs	r3, r7
 80002c4:	0018      	movs	r0, r3
 80002c6:	2310      	movs	r3, #16
 80002c8:	001a      	movs	r2, r3
 80002ca:	2100      	movs	r1, #0
 80002cc:	f003 fe88 	bl	8003fe0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002d0:	0021      	movs	r1, r4
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2212      	movs	r2, #18
 80002d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2201      	movs	r2, #1
 80002dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2201      	movs	r2, #1
 80002e2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2210      	movs	r2, #16
 80002e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2210      	movs	r2, #16
 80002ee:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2202      	movs	r2, #2
 80002f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2280      	movs	r2, #128	; 0x80
 80002fa:	0212      	lsls	r2, r2, #8
 80002fc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002fe:	187b      	adds	r3, r7, r1
 8000300:	2280      	movs	r2, #128	; 0x80
 8000302:	0352      	lsls	r2, r2, #13
 8000304:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2200      	movs	r2, #0
 800030a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030c:	187b      	adds	r3, r7, r1
 800030e:	0018      	movs	r0, r3
 8000310:	f001 f990 	bl	8001634 <HAL_RCC_OscConfig>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000318:	f000 fa54 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031c:	003b      	movs	r3, r7
 800031e:	2207      	movs	r2, #7
 8000320:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	003b      	movs	r3, r7
 8000324:	2202      	movs	r2, #2
 8000326:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000328:	003b      	movs	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032e:	003b      	movs	r3, r7
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000334:	003b      	movs	r3, r7
 8000336:	2101      	movs	r1, #1
 8000338:	0018      	movs	r0, r3
 800033a:	f001 fc99 	bl	8001c70 <HAL_RCC_ClockConfig>
 800033e:	1e03      	subs	r3, r0, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000342:	f000 fa3f 	bl	80007c4 <Error_Handler>
  }
}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	46bd      	mov	sp, r7
 800034a:	b011      	add	sp, #68	; 0x44
 800034c:	bd90      	pop	{r4, r7, pc}
	...

08000350 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	0018      	movs	r0, r3
 800035a:	230c      	movs	r3, #12
 800035c:	001a      	movs	r2, r3
 800035e:	2100      	movs	r1, #0
 8000360:	f003 fe3e 	bl	8003fe0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000364:	4b33      	ldr	r3, [pc, #204]	; (8000434 <MX_ADC_Init+0xe4>)
 8000366:	4a34      	ldr	r2, [pc, #208]	; (8000438 <MX_ADC_Init+0xe8>)
 8000368:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800036a:	4b32      	ldr	r3, [pc, #200]	; (8000434 <MX_ADC_Init+0xe4>)
 800036c:	2200      	movs	r2, #0
 800036e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000370:	4b30      	ldr	r3, [pc, #192]	; (8000434 <MX_ADC_Init+0xe4>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000376:	4b2f      	ldr	r3, [pc, #188]	; (8000434 <MX_ADC_Init+0xe4>)
 8000378:	2200      	movs	r2, #0
 800037a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800037c:	4b2d      	ldr	r3, [pc, #180]	; (8000434 <MX_ADC_Init+0xe4>)
 800037e:	2201      	movs	r2, #1
 8000380:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000382:	4b2c      	ldr	r3, [pc, #176]	; (8000434 <MX_ADC_Init+0xe4>)
 8000384:	2204      	movs	r2, #4
 8000386:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000388:	4b2a      	ldr	r3, [pc, #168]	; (8000434 <MX_ADC_Init+0xe4>)
 800038a:	2200      	movs	r2, #0
 800038c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800038e:	4b29      	ldr	r3, [pc, #164]	; (8000434 <MX_ADC_Init+0xe4>)
 8000390:	2200      	movs	r2, #0
 8000392:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000394:	4b27      	ldr	r3, [pc, #156]	; (8000434 <MX_ADC_Init+0xe4>)
 8000396:	2200      	movs	r2, #0
 8000398:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800039a:	4b26      	ldr	r3, [pc, #152]	; (8000434 <MX_ADC_Init+0xe4>)
 800039c:	2200      	movs	r2, #0
 800039e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003a0:	4b24      	ldr	r3, [pc, #144]	; (8000434 <MX_ADC_Init+0xe4>)
 80003a2:	22c2      	movs	r2, #194	; 0xc2
 80003a4:	32ff      	adds	r2, #255	; 0xff
 80003a6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003a8:	4b22      	ldr	r3, [pc, #136]	; (8000434 <MX_ADC_Init+0xe4>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003ae:	4b21      	ldr	r3, [pc, #132]	; (8000434 <MX_ADC_Init+0xe4>)
 80003b0:	2224      	movs	r2, #36	; 0x24
 80003b2:	2100      	movs	r1, #0
 80003b4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003b6:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <MX_ADC_Init+0xe4>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003bc:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <MX_ADC_Init+0xe4>)
 80003be:	0018      	movs	r0, r3
 80003c0:	f000 fc18 	bl	8000bf4 <HAL_ADC_Init>
 80003c4:	1e03      	subs	r3, r0, #0
 80003c6:	d001      	beq.n	80003cc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003c8:	f000 f9fc 	bl	80007c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2280      	movs	r2, #128	; 0x80
 80003d6:	0152      	lsls	r2, r2, #5
 80003d8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2280      	movs	r2, #128	; 0x80
 80003de:	0552      	lsls	r2, r2, #21
 80003e0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003e2:	1d3a      	adds	r2, r7, #4
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <MX_ADC_Init+0xe4>)
 80003e6:	0011      	movs	r1, r2
 80003e8:	0018      	movs	r0, r3
 80003ea:	f000 fd43 	bl	8000e74 <HAL_ADC_ConfigChannel>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80003f2:	f000 f9e7 	bl	80007c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2201      	movs	r2, #1
 80003fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80003fc:	1d3a      	adds	r2, r7, #4
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <MX_ADC_Init+0xe4>)
 8000400:	0011      	movs	r1, r2
 8000402:	0018      	movs	r0, r3
 8000404:	f000 fd36 	bl	8000e74 <HAL_ADC_ConfigChannel>
 8000408:	1e03      	subs	r3, r0, #0
 800040a:	d001      	beq.n	8000410 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 800040c:	f000 f9da 	bl	80007c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2204      	movs	r2, #4
 8000414:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000416:	1d3a      	adds	r2, r7, #4
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_ADC_Init+0xe4>)
 800041a:	0011      	movs	r1, r2
 800041c:	0018      	movs	r0, r3
 800041e:	f000 fd29 	bl	8000e74 <HAL_ADC_ConfigChannel>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000426:	f000 f9cd 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b004      	add	sp, #16
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	20000028 	.word	0x20000028
 8000438:	40012400 	.word	0x40012400

0800043c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b096      	sub	sp, #88	; 0x58
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000442:	2348      	movs	r3, #72	; 0x48
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	0018      	movs	r0, r3
 8000448:	2310      	movs	r3, #16
 800044a:	001a      	movs	r2, r3
 800044c:	2100      	movs	r1, #0
 800044e:	f003 fdc7 	bl	8003fe0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000452:	2340      	movs	r3, #64	; 0x40
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	0018      	movs	r0, r3
 8000458:	2308      	movs	r3, #8
 800045a:	001a      	movs	r2, r3
 800045c:	2100      	movs	r1, #0
 800045e:	f003 fdbf 	bl	8003fe0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000462:	2324      	movs	r3, #36	; 0x24
 8000464:	18fb      	adds	r3, r7, r3
 8000466:	0018      	movs	r0, r3
 8000468:	231c      	movs	r3, #28
 800046a:	001a      	movs	r2, r3
 800046c:	2100      	movs	r1, #0
 800046e:	f003 fdb7 	bl	8003fe0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	0018      	movs	r0, r3
 8000476:	2320      	movs	r3, #32
 8000478:	001a      	movs	r2, r3
 800047a:	2100      	movs	r1, #0
 800047c:	f003 fdb0 	bl	8003fe0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000480:	4b57      	ldr	r3, [pc, #348]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 8000482:	4a58      	ldr	r2, [pc, #352]	; (80005e4 <MX_TIM1_Init+0x1a8>)
 8000484:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8000486:	4b56      	ldr	r3, [pc, #344]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 8000488:	222f      	movs	r2, #47	; 0x2f
 800048a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048c:	4b54      	ldr	r3, [pc, #336]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000492:	4b53      	ldr	r3, [pc, #332]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 8000494:	4a54      	ldr	r2, [pc, #336]	; (80005e8 <MX_TIM1_Init+0x1ac>)
 8000496:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000498:	4b51      	ldr	r3, [pc, #324]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800049e:	4b50      	ldr	r3, [pc, #320]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a4:	4b4e      	ldr	r3, [pc, #312]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004aa:	4b4d      	ldr	r3, [pc, #308]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 fd33 	bl	8001f18 <HAL_TIM_Base_Init>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80004b6:	f000 f985 	bl	80007c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004ba:	2148      	movs	r1, #72	; 0x48
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	2280      	movs	r2, #128	; 0x80
 80004c0:	0152      	lsls	r2, r2, #5
 80004c2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004c4:	187a      	adds	r2, r7, r1
 80004c6:	4b46      	ldr	r3, [pc, #280]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 ff44 	bl	8002358 <HAL_TIM_ConfigClockSource>
 80004d0:	1e03      	subs	r3, r0, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80004d4:	f000 f976 	bl	80007c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004d8:	4b41      	ldr	r3, [pc, #260]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 fd6c 	bl	8001fb8 <HAL_TIM_PWM_Init>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80004e4:	f000 f96e 	bl	80007c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e8:	2140      	movs	r1, #64	; 0x40
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f0:	187b      	adds	r3, r7, r1
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004f6:	187a      	adds	r2, r7, r1
 80004f8:	4b39      	ldr	r3, [pc, #228]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 80004fa:	0011      	movs	r1, r2
 80004fc:	0018      	movs	r0, r3
 80004fe:	f002 fb2f 	bl	8002b60 <HAL_TIMEx_MasterConfigSynchronization>
 8000502:	1e03      	subs	r3, r0, #0
 8000504:	d001      	beq.n	800050a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000506:	f000 f95d 	bl	80007c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800050a:	2124      	movs	r1, #36	; 0x24
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2260      	movs	r2, #96	; 0x60
 8000510:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1000;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	22fa      	movs	r2, #250	; 0xfa
 8000516:	0092      	lsls	r2, r2, #2
 8000518:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000538:	1879      	adds	r1, r7, r1
 800053a:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 800053c:	2200      	movs	r2, #0
 800053e:	0018      	movs	r0, r3
 8000540:	f001 fe44 	bl	80021cc <HAL_TIM_PWM_ConfigChannel>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000548:	f000 f93c 	bl	80007c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800054c:	2324      	movs	r3, #36	; 0x24
 800054e:	18f9      	adds	r1, r7, r3
 8000550:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 8000552:	2204      	movs	r2, #4
 8000554:	0018      	movs	r0, r3
 8000556:	f001 fe39 	bl	80021cc <HAL_TIM_PWM_ConfigChannel>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800055e:	f000 f931 	bl	80007c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000562:	2324      	movs	r3, #36	; 0x24
 8000564:	18f9      	adds	r1, r7, r3
 8000566:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 8000568:	2208      	movs	r2, #8
 800056a:	0018      	movs	r0, r3
 800056c:	f001 fe2e 	bl	80021cc <HAL_TIM_PWM_ConfigChannel>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000574:	f000 f926 	bl	80007c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000578:	2324      	movs	r3, #36	; 0x24
 800057a:	18f9      	adds	r1, r7, r3
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 800057e:	220c      	movs	r2, #12
 8000580:	0018      	movs	r0, r3
 8000582:	f001 fe23 	bl	80021cc <HAL_TIM_PWM_ConfigChannel>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <MX_TIM1_Init+0x152>
  {
    Error_Handler();
 800058a:	f000 f91b 	bl	80007c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	0192      	lsls	r2, r2, #6
 80005b2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005ba:	1d3a      	adds	r2, r7, #4
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 80005be:	0011      	movs	r1, r2
 80005c0:	0018      	movs	r0, r3
 80005c2:	f002 fb25 	bl	8002c10 <HAL_TIMEx_ConfigBreakDeadTime>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 80005ca:	f000 f8fb 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <MX_TIM1_Init+0x1a4>)
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 f987 	bl	80008e4 <HAL_TIM_MspPostInit>

}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b016      	add	sp, #88	; 0x58
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	20000068 	.word	0x20000068
 80005e4:	40012c00 	.word	0x40012c00
 80005e8:	00004e1f 	.word	0x00004e1f

080005ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_USART2_UART_Init+0x58>)
 80005f2:	4a15      	ldr	r2, [pc, #84]	; (8000648 <MX_USART2_UART_Init+0x5c>)
 80005f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <MX_USART2_UART_Init+0x58>)
 80005f8:	2296      	movs	r2, #150	; 0x96
 80005fa:	0212      	lsls	r2, r2, #8
 80005fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_USART2_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000612:	220c      	movs	r2, #12
 8000614:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_USART2_UART_Init+0x58>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_USART2_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000630:	0018      	movs	r0, r3
 8000632:	f002 fb4b 	bl	8002ccc <HAL_UART_Init>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800063a:	f000 f8c3 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000b0 	.word	0x200000b0
 8000648:	40004400 	.word	0x40004400

0800064c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_USART3_UART_Init+0x58>)
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <MX_USART3_UART_Init+0x5c>)
 8000654:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 15200;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_USART3_UART_Init+0x58>)
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <MX_USART3_UART_Init+0x60>)
 800065a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART3_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_USART3_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART3_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_USART3_UART_Init+0x58>)
 8000670:	220c      	movs	r2, #12
 8000672:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART3_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_USART3_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART3_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_USART3_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800068c:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <MX_USART3_UART_Init+0x58>)
 800068e:	0018      	movs	r0, r3
 8000690:	f002 fb1c 	bl	8002ccc <HAL_UART_Init>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8000698:	f000 f894 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	20000134 	.word	0x20000134
 80006a8:	40004800 	.word	0x40004800
 80006ac:	00003b60 	.word	0x00003b60

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b089      	sub	sp, #36	; 0x24
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	240c      	movs	r4, #12
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	0018      	movs	r0, r3
 80006bc:	2314      	movs	r3, #20
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f003 fc8d 	bl	8003fe0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	4b34      	ldr	r3, [pc, #208]	; (8000798 <MX_GPIO_Init+0xe8>)
 80006c8:	695a      	ldr	r2, [r3, #20]
 80006ca:	4b33      	ldr	r3, [pc, #204]	; (8000798 <MX_GPIO_Init+0xe8>)
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	0309      	lsls	r1, r1, #12
 80006d0:	430a      	orrs	r2, r1
 80006d2:	615a      	str	r2, [r3, #20]
 80006d4:	4b30      	ldr	r3, [pc, #192]	; (8000798 <MX_GPIO_Init+0xe8>)
 80006d6:	695a      	ldr	r2, [r3, #20]
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	031b      	lsls	r3, r3, #12
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <MX_GPIO_Init+0xe8>)
 80006e4:	695a      	ldr	r2, [r3, #20]
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <MX_GPIO_Init+0xe8>)
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	03c9      	lsls	r1, r1, #15
 80006ec:	430a      	orrs	r2, r1
 80006ee:	615a      	str	r2, [r3, #20]
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <MX_GPIO_Init+0xe8>)
 80006f2:	695a      	ldr	r2, [r3, #20]
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	03db      	lsls	r3, r3, #15
 80006f8:	4013      	ands	r3, r2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_GPIO_Init+0xe8>)
 8000700:	695a      	ldr	r2, [r3, #20]
 8000702:	4b25      	ldr	r3, [pc, #148]	; (8000798 <MX_GPIO_Init+0xe8>)
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	0289      	lsls	r1, r1, #10
 8000708:	430a      	orrs	r2, r1
 800070a:	615a      	str	r2, [r3, #20]
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_GPIO_Init+0xe8>)
 800070e:	695a      	ldr	r2, [r3, #20]
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	029b      	lsls	r3, r3, #10
 8000714:	4013      	ands	r3, r2
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800071a:	2390      	movs	r3, #144	; 0x90
 800071c:	05db      	lsls	r3, r3, #23
 800071e:	2200      	movs	r2, #0
 8000720:	2120      	movs	r1, #32
 8000722:	0018      	movs	r0, r3
 8000724:	f000 ff68 	bl	80015f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000728:	193b      	adds	r3, r7, r4
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	0192      	lsls	r2, r2, #6
 800072e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2284      	movs	r2, #132	; 0x84
 8000734:	0392      	lsls	r2, r2, #14
 8000736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800073e:	193b      	adds	r3, r7, r4
 8000740:	4a16      	ldr	r2, [pc, #88]	; (800079c <MX_GPIO_Init+0xec>)
 8000742:	0019      	movs	r1, r3
 8000744:	0010      	movs	r0, r2
 8000746:	f000 fde7 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2220      	movs	r2, #32
 800074e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2201      	movs	r2, #1
 8000754:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000762:	193a      	adds	r2, r7, r4
 8000764:	2390      	movs	r3, #144	; 0x90
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fdd4 	bl	8001318 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_OFF_B_Pin */
  GPIO_InitStruct.Pin = ON_OFF_B_Pin;
 8000770:	193b      	adds	r3, r7, r4
 8000772:	2240      	movs	r2, #64	; 0x40
 8000774:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000776:	193b      	adds	r3, r7, r4
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077c:	193b      	adds	r3, r7, r4
 800077e:	2201      	movs	r2, #1
 8000780:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ON_OFF_B_GPIO_Port, &GPIO_InitStruct);
 8000782:	193a      	adds	r2, r7, r4
 8000784:	2390      	movs	r3, #144	; 0x90
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fdc4 	bl	8001318 <HAL_GPIO_Init>

}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b009      	add	sp, #36	; 0x24
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	48000800 	.word	0x48000800

080007a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
	{

	}
	HAL_UART_Receive_IT(&huart3, &byteRead, 1);
 80007a8:	4904      	ldr	r1, [pc, #16]	; (80007bc <HAL_UART_RxCpltCallback+0x1c>)
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_UART_RxCpltCallback+0x20>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	0018      	movs	r0, r3
 80007b0:	f002 fae0 	bl	8002d74 <HAL_UART_Receive_IT>
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200001b8 	.word	0x200001b8
 80007c0:	20000134 	.word	0x20000134

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <HAL_MspInit+0x44>)
 80007d8:	699a      	ldr	r2, [r3, #24]
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_MspInit+0x44>)
 80007dc:	2101      	movs	r1, #1
 80007de:	430a      	orrs	r2, r1
 80007e0:	619a      	str	r2, [r3, #24]
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_MspInit+0x44>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	2201      	movs	r2, #1
 80007e8:	4013      	ands	r3, r2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_MspInit+0x44>)
 80007f0:	69da      	ldr	r2, [r3, #28]
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_MspInit+0x44>)
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	0549      	lsls	r1, r1, #21
 80007f8:	430a      	orrs	r2, r1
 80007fa:	61da      	str	r2, [r3, #28]
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_MspInit+0x44>)
 80007fe:	69da      	ldr	r2, [r3, #28]
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	055b      	lsls	r3, r3, #21
 8000804:	4013      	ands	r3, r2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b002      	add	sp, #8
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b08b      	sub	sp, #44	; 0x2c
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	2414      	movs	r4, #20
 8000822:	193b      	adds	r3, r7, r4
 8000824:	0018      	movs	r0, r3
 8000826:	2314      	movs	r3, #20
 8000828:	001a      	movs	r2, r3
 800082a:	2100      	movs	r1, #0
 800082c:	f003 fbd8 	bl	8003fe0 <memset>
  if(hadc->Instance==ADC1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a19      	ldr	r2, [pc, #100]	; (800089c <HAL_ADC_MspInit+0x84>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d12b      	bne.n	8000892 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_ADC_MspInit+0x88>)
 800083c:	699a      	ldr	r2, [r3, #24]
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <HAL_ADC_MspInit+0x88>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	0089      	lsls	r1, r1, #2
 8000844:	430a      	orrs	r2, r1
 8000846:	619a      	str	r2, [r3, #24]
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_ADC_MspInit+0x88>)
 800084a:	699a      	ldr	r2, [r3, #24]
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_ADC_MspInit+0x88>)
 8000858:	695a      	ldr	r2, [r3, #20]
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HAL_ADC_MspInit+0x88>)
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	0289      	lsls	r1, r1, #10
 8000860:	430a      	orrs	r2, r1
 8000862:	615a      	str	r2, [r3, #20]
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <HAL_ADC_MspInit+0x88>)
 8000866:	695a      	ldr	r2, [r3, #20]
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	029b      	lsls	r3, r3, #10
 800086c:	4013      	ands	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000872:	193b      	adds	r3, r7, r4
 8000874:	2213      	movs	r2, #19
 8000876:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2203      	movs	r2, #3
 800087c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	193a      	adds	r2, r7, r4
 8000886:	2390      	movs	r3, #144	; 0x90
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f000 fd43 	bl	8001318 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b00b      	add	sp, #44	; 0x2c
 8000898:	bd90      	pop	{r4, r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	40012400 	.word	0x40012400
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <HAL_TIM_Base_MspInit+0x38>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d10d      	bne.n	80008d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008b6:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <HAL_TIM_Base_MspInit+0x3c>)
 80008b8:	699a      	ldr	r2, [r3, #24]
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_TIM_Base_MspInit+0x3c>)
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	0109      	lsls	r1, r1, #4
 80008c0:	430a      	orrs	r2, r1
 80008c2:	619a      	str	r2, [r3, #24]
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_TIM_Base_MspInit+0x3c>)
 80008c6:	699a      	ldr	r2, [r3, #24]
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	4013      	ands	r3, r2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b004      	add	sp, #16
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	40012c00 	.word	0x40012c00
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	240c      	movs	r4, #12
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	0018      	movs	r0, r3
 80008f2:	2314      	movs	r3, #20
 80008f4:	001a      	movs	r2, r3
 80008f6:	2100      	movs	r1, #0
 80008f8:	f003 fb72 	bl	8003fe0 <memset>
  if(htim->Instance==TIM1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a16      	ldr	r2, [pc, #88]	; (800095c <HAL_TIM_MspPostInit+0x78>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d125      	bne.n	8000952 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <HAL_TIM_MspPostInit+0x7c>)
 8000908:	695a      	ldr	r2, [r3, #20]
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_TIM_MspPostInit+0x7c>)
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	0289      	lsls	r1, r1, #10
 8000910:	430a      	orrs	r2, r1
 8000912:	615a      	str	r2, [r3, #20]
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_TIM_MspPostInit+0x7c>)
 8000916:	695a      	ldr	r2, [r3, #20]
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	029b      	lsls	r3, r3, #10
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	22f0      	movs	r2, #240	; 0xf0
 8000926:	0112      	lsls	r2, r2, #4
 8000928:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	0021      	movs	r1, r4
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2202      	movs	r2, #2
 8000930:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2202      	movs	r2, #2
 8000942:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	187a      	adds	r2, r7, r1
 8000946:	2390      	movs	r3, #144	; 0x90
 8000948:	05db      	lsls	r3, r3, #23
 800094a:	0011      	movs	r1, r2
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fce3 	bl	8001318 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b009      	add	sp, #36	; 0x24
 8000958:	bd90      	pop	{r4, r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	40012c00 	.word	0x40012c00
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b08d      	sub	sp, #52	; 0x34
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	241c      	movs	r4, #28
 800096e:	193b      	adds	r3, r7, r4
 8000970:	0018      	movs	r0, r3
 8000972:	2314      	movs	r3, #20
 8000974:	001a      	movs	r2, r3
 8000976:	2100      	movs	r1, #0
 8000978:	f003 fb32 	bl	8003fe0 <memset>
  if(huart->Instance==USART2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a3c      	ldr	r2, [pc, #240]	; (8000a74 <HAL_UART_MspInit+0x110>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d133      	bne.n	80009ee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000986:	4b3c      	ldr	r3, [pc, #240]	; (8000a78 <HAL_UART_MspInit+0x114>)
 8000988:	69da      	ldr	r2, [r3, #28]
 800098a:	4b3b      	ldr	r3, [pc, #236]	; (8000a78 <HAL_UART_MspInit+0x114>)
 800098c:	2180      	movs	r1, #128	; 0x80
 800098e:	0289      	lsls	r1, r1, #10
 8000990:	430a      	orrs	r2, r1
 8000992:	61da      	str	r2, [r3, #28]
 8000994:	4b38      	ldr	r3, [pc, #224]	; (8000a78 <HAL_UART_MspInit+0x114>)
 8000996:	69da      	ldr	r2, [r3, #28]
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	029b      	lsls	r3, r3, #10
 800099c:	4013      	ands	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]
 80009a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b35      	ldr	r3, [pc, #212]	; (8000a78 <HAL_UART_MspInit+0x114>)
 80009a4:	695a      	ldr	r2, [r3, #20]
 80009a6:	4b34      	ldr	r3, [pc, #208]	; (8000a78 <HAL_UART_MspInit+0x114>)
 80009a8:	2180      	movs	r1, #128	; 0x80
 80009aa:	0289      	lsls	r1, r1, #10
 80009ac:	430a      	orrs	r2, r1
 80009ae:	615a      	str	r2, [r3, #20]
 80009b0:	4b31      	ldr	r3, [pc, #196]	; (8000a78 <HAL_UART_MspInit+0x114>)
 80009b2:	695a      	ldr	r2, [r3, #20]
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	029b      	lsls	r3, r3, #10
 80009b8:	4013      	ands	r3, r2
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009be:	0021      	movs	r1, r4
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	220c      	movs	r2, #12
 80009c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2202      	movs	r2, #2
 80009ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2203      	movs	r2, #3
 80009d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2201      	movs	r2, #1
 80009dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	187a      	adds	r2, r7, r1
 80009e0:	2390      	movs	r3, #144	; 0x90
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	0011      	movs	r1, r2
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 fc96 	bl	8001318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009ec:	e03e      	b.n	8000a6c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART3)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a22      	ldr	r2, [pc, #136]	; (8000a7c <HAL_UART_MspInit+0x118>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d139      	bne.n	8000a6c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <HAL_UART_MspInit+0x114>)
 80009fa:	69da      	ldr	r2, [r3, #28]
 80009fc:	4b1e      	ldr	r3, [pc, #120]	; (8000a78 <HAL_UART_MspInit+0x114>)
 80009fe:	2180      	movs	r1, #128	; 0x80
 8000a00:	02c9      	lsls	r1, r1, #11
 8000a02:	430a      	orrs	r2, r1
 8000a04:	61da      	str	r2, [r3, #28]
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <HAL_UART_MspInit+0x114>)
 8000a08:	69da      	ldr	r2, [r3, #28]
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	02db      	lsls	r3, r3, #11
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_UART_MspInit+0x114>)
 8000a16:	695a      	ldr	r2, [r3, #20]
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_UART_MspInit+0x114>)
 8000a1a:	2180      	movs	r1, #128	; 0x80
 8000a1c:	0309      	lsls	r1, r1, #12
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	615a      	str	r2, [r3, #20]
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_UART_MspInit+0x114>)
 8000a24:	695a      	ldr	r2, [r3, #20]
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	031b      	lsls	r3, r3, #12
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a30:	211c      	movs	r1, #28
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2230      	movs	r2, #48	; 0x30
 8000a36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2203      	movs	r2, #3
 8000a48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <HAL_UART_MspInit+0x11c>)
 8000a54:	0019      	movs	r1, r3
 8000a56:	0010      	movs	r0, r2
 8000a58:	f000 fc5e 	bl	8001318 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	201d      	movs	r0, #29
 8000a62:	f000 fba9 	bl	80011b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000a66:	201d      	movs	r0, #29
 8000a68:	f000 fbbb 	bl	80011e2 <HAL_NVIC_EnableIRQ>
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	b00d      	add	sp, #52	; 0x34
 8000a72:	bd90      	pop	{r4, r7, pc}
 8000a74:	40004400 	.word	0x40004400
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40004800 	.word	0x40004800
 8000a80:	48000800 	.word	0x48000800

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa8:	f000 f888 	bl	8000bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <USART3_4_IRQHandler+0x14>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f002 f9bc 	bl	8002e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	20000134 	.word	0x20000134

08000acc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ada:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ade:	490e      	ldr	r1, [pc, #56]	; (8000b18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <LoopForever+0xe>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af4:	4c0b      	ldr	r4, [pc, #44]	; (8000b24 <LoopForever+0x16>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b02:	f7ff ffe3 	bl	8000acc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b06:	f003 fa47 	bl	8003f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0a:	f7ff fb89 	bl	8000220 <main>

08000b0e <LoopForever>:

LoopForever:
    b LoopForever
 8000b0e:	e7fe      	b.n	8000b0e <LoopForever>
  ldr   r0, =_estack
 8000b10:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b1c:	08004048 	.word	0x08004048
  ldr r2, =_sbss
 8000b20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b24:	200001c0 	.word	0x200001c0

08000b28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC1_IRQHandler>
	...

08000b2c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <HAL_Init+0x24>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_Init+0x24>)
 8000b36:	2110      	movs	r1, #16
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 f809 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b42:	f7ff fe45 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	40022000 	.word	0x40022000

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <HAL_InitTick+0x5c>)
 8000b5e:	681c      	ldr	r4, [r3, #0]
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_InitTick+0x60>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	0019      	movs	r1, r3
 8000b66:	23fa      	movs	r3, #250	; 0xfa
 8000b68:	0098      	lsls	r0, r3, #2
 8000b6a:	f7ff facd 	bl	8000108 <__udivsi3>
 8000b6e:	0003      	movs	r3, r0
 8000b70:	0019      	movs	r1, r3
 8000b72:	0020      	movs	r0, r4
 8000b74:	f7ff fac8 	bl	8000108 <__udivsi3>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 fb41 	bl	8001202 <HAL_SYSTICK_Config>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	e00f      	b.n	8000ba8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d80b      	bhi.n	8000ba6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	2301      	movs	r3, #1
 8000b92:	425b      	negs	r3, r3
 8000b94:	2200      	movs	r2, #0
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 fb0e 	bl	80011b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_InitTick+0x64>)
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b003      	add	sp, #12
 8000bae:	bd90      	pop	{r4, r7, pc}
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000004 	.word	0x20000004

08000bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_IncTick+0x1c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <HAL_IncTick+0x20>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	18d2      	adds	r2, r2, r3
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_IncTick+0x20>)
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	200001bc 	.word	0x200001bc

08000be0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b02      	ldr	r3, [pc, #8]	; (8000bf0 <HAL_GetTick+0x10>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	0018      	movs	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	200001bc 	.word	0x200001bc

08000bf4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d101      	bne.n	8000c12 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e125      	b.n	8000e5e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d10a      	bne.n	8000c30 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2234      	movs	r2, #52	; 0x34
 8000c24:	2100      	movs	r1, #0
 8000c26:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f7ff fdf4 	bl	8000818 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c34:	2210      	movs	r2, #16
 8000c36:	4013      	ands	r3, r2
 8000c38:	d000      	beq.n	8000c3c <HAL_ADC_Init+0x48>
 8000c3a:	e103      	b.n	8000e44 <HAL_ADC_Init+0x250>
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d000      	beq.n	8000c48 <HAL_ADC_Init+0x54>
 8000c46:	e0fd      	b.n	8000e44 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	2204      	movs	r2, #4
 8000c50:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000c52:	d000      	beq.n	8000c56 <HAL_ADC_Init+0x62>
 8000c54:	e0f6      	b.n	8000e44 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c5a:	4a83      	ldr	r2, [pc, #524]	; (8000e68 <HAL_ADC_Init+0x274>)
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	2202      	movs	r2, #2
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	4013      	ands	r3, r2
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d112      	bne.n	8000c9a <HAL_ADC_Init+0xa6>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d009      	beq.n	8000c96 <HAL_ADC_Init+0xa2>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	021b      	lsls	r3, r3, #8
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d101      	bne.n	8000c9a <HAL_ADC_Init+0xa6>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <HAL_ADC_Init+0xa8>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d116      	bne.n	8000cce <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	2218      	movs	r2, #24
 8000ca8:	4393      	bics	r3, r2
 8000caa:	0019      	movs	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	0899      	lsrs	r1, r3, #2
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4964      	ldr	r1, [pc, #400]	; (8000e6c <HAL_ADC_Init+0x278>)
 8000cda:	400a      	ands	r2, r1
 8000cdc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	7e1b      	ldrb	r3, [r3, #24]
 8000ce2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7e5b      	ldrb	r3, [r3, #25]
 8000ce8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000cea:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	7e9b      	ldrb	r3, [r3, #26]
 8000cf0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000cf2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d002      	beq.n	8000d02 <HAL_ADC_Init+0x10e>
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	015b      	lsls	r3, r3, #5
 8000d00:	e000      	b.n	8000d04 <HAL_ADC_Init+0x110>
 8000d02:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d04:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d0a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d101      	bne.n	8000d18 <HAL_ADC_Init+0x124>
 8000d14:	2304      	movs	r3, #4
 8000d16:	e000      	b.n	8000d1a <HAL_ADC_Init+0x126>
 8000d18:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000d1a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2124      	movs	r1, #36	; 0x24
 8000d20:	5c5b      	ldrb	r3, [r3, r1]
 8000d22:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d24:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7edb      	ldrb	r3, [r3, #27]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d115      	bne.n	8000d60 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7e9b      	ldrb	r3, [r3, #26]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d105      	bne.n	8000d48 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	2280      	movs	r2, #128	; 0x80
 8000d40:	0252      	lsls	r2, r2, #9
 8000d42:	4313      	orrs	r3, r2
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	e00b      	b.n	8000d60 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d58:	2201      	movs	r2, #1
 8000d5a:	431a      	orrs	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69da      	ldr	r2, [r3, #28]
 8000d64:	23c2      	movs	r3, #194	; 0xc2
 8000d66:	33ff      	adds	r3, #255	; 0xff
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d007      	beq.n	8000d7c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d74:	4313      	orrs	r3, r2
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68d9      	ldr	r1, [r3, #12]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	055b      	lsls	r3, r3, #21
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d01b      	beq.n	8000dd0 <HAL_ADC_Init+0x1dc>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d017      	beq.n	8000dd0 <HAL_ADC_Init+0x1dc>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d013      	beq.n	8000dd0 <HAL_ADC_Init+0x1dc>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dac:	2b03      	cmp	r3, #3
 8000dae:	d00f      	beq.n	8000dd0 <HAL_ADC_Init+0x1dc>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d00b      	beq.n	8000dd0 <HAL_ADC_Init+0x1dc>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbc:	2b05      	cmp	r3, #5
 8000dbe:	d007      	beq.n	8000dd0 <HAL_ADC_Init+0x1dc>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc4:	2b06      	cmp	r3, #6
 8000dc6:	d003      	beq.n	8000dd0 <HAL_ADC_Init+0x1dc>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dcc:	2b07      	cmp	r3, #7
 8000dce:	d112      	bne.n	8000df6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	695a      	ldr	r2, [r3, #20]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2107      	movs	r1, #7
 8000ddc:	438a      	bics	r2, r1
 8000dde:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6959      	ldr	r1, [r3, #20]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dea:	2207      	movs	r2, #7
 8000dec:	401a      	ands	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	430a      	orrs	r2, r1
 8000df4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	4a1c      	ldr	r2, [pc, #112]	; (8000e70 <HAL_ADC_Init+0x27c>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d10b      	bne.n	8000e1e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e10:	2203      	movs	r2, #3
 8000e12:	4393      	bics	r3, r2
 8000e14:	2201      	movs	r2, #1
 8000e16:	431a      	orrs	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e1c:	e01c      	b.n	8000e58 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e22:	2212      	movs	r2, #18
 8000e24:	4393      	bics	r3, r2
 8000e26:	2210      	movs	r2, #16
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e32:	2201      	movs	r2, #1
 8000e34:	431a      	orrs	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	18fb      	adds	r3, r7, r3
 8000e3e:	2201      	movs	r2, #1
 8000e40:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e42:	e009      	b.n	8000e58 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e48:	2210      	movs	r2, #16
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000e50:	230f      	movs	r3, #15
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e58:	230f      	movs	r3, #15
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	781b      	ldrb	r3, [r3, #0]
}
 8000e5e:	0018      	movs	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b004      	add	sp, #16
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	fffffefd 	.word	0xfffffefd
 8000e6c:	fffe0219 	.word	0xfffe0219
 8000e70:	833fffe7 	.word	0x833fffe7

08000e74 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e7e:	230f      	movs	r3, #15
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	055b      	lsls	r3, r3, #21
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d011      	beq.n	8000eba <HAL_ADC_ConfigChannel+0x46>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d00d      	beq.n	8000eba <HAL_ADC_ConfigChannel+0x46>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d009      	beq.n	8000eba <HAL_ADC_ConfigChannel+0x46>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d005      	beq.n	8000eba <HAL_ADC_ConfigChannel+0x46>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d001      	beq.n	8000eba <HAL_ADC_ConfigChannel+0x46>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2234      	movs	r2, #52	; 0x34
 8000ebe:	5c9b      	ldrb	r3, [r3, r2]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d101      	bne.n	8000ec8 <HAL_ADC_ConfigChannel+0x54>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e0bb      	b.n	8001040 <HAL_ADC_ConfigChannel+0x1cc>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2234      	movs	r2, #52	; 0x34
 8000ecc:	2101      	movs	r1, #1
 8000ece:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d000      	beq.n	8000ede <HAL_ADC_ConfigChannel+0x6a>
 8000edc:	e09f      	b.n	800101e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	4a59      	ldr	r2, [pc, #356]	; (8001048 <HAL_ADC_ConfigChannel+0x1d4>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d100      	bne.n	8000eea <HAL_ADC_ConfigChannel+0x76>
 8000ee8:	e077      	b.n	8000fda <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	409a      	lsls	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	055b      	lsls	r3, r3, #21
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d037      	beq.n	8000f7c <HAL_ADC_ConfigChannel+0x108>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d033      	beq.n	8000f7c <HAL_ADC_ConfigChannel+0x108>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d02f      	beq.n	8000f7c <HAL_ADC_ConfigChannel+0x108>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d02b      	beq.n	8000f7c <HAL_ADC_ConfigChannel+0x108>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d027      	beq.n	8000f7c <HAL_ADC_ConfigChannel+0x108>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d023      	beq.n	8000f7c <HAL_ADC_ConfigChannel+0x108>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	2b06      	cmp	r3, #6
 8000f3a:	d01f      	beq.n	8000f7c <HAL_ADC_ConfigChannel+0x108>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f40:	2b07      	cmp	r3, #7
 8000f42:	d01b      	beq.n	8000f7c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	2107      	movs	r1, #7
 8000f50:	400b      	ands	r3, r1
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d012      	beq.n	8000f7c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	695a      	ldr	r2, [r3, #20]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2107      	movs	r1, #7
 8000f62:	438a      	bics	r2, r1
 8000f64:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	6959      	ldr	r1, [r3, #20]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2207      	movs	r2, #7
 8000f72:	401a      	ands	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b10      	cmp	r3, #16
 8000f82:	d003      	beq.n	8000f8c <HAL_ADC_ConfigChannel+0x118>
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b11      	cmp	r3, #17
 8000f8a:	d152      	bne.n	8001032 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000f8c:	4b2f      	ldr	r3, [pc, #188]	; (800104c <HAL_ADC_ConfigChannel+0x1d8>)
 8000f8e:	6819      	ldr	r1, [r3, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b10      	cmp	r3, #16
 8000f96:	d102      	bne.n	8000f9e <HAL_ADC_ConfigChannel+0x12a>
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	e001      	b.n	8000fa2 <HAL_ADC_ConfigChannel+0x12e>
 8000f9e:	2380      	movs	r3, #128	; 0x80
 8000fa0:	03db      	lsls	r3, r3, #15
 8000fa2:	4a2a      	ldr	r2, [pc, #168]	; (800104c <HAL_ADC_ConfigChannel+0x1d8>)
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b10      	cmp	r3, #16
 8000fae:	d140      	bne.n	8001032 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_ADC_ConfigChannel+0x1dc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4927      	ldr	r1, [pc, #156]	; (8001054 <HAL_ADC_ConfigChannel+0x1e0>)
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff f8a6 	bl	8000108 <__udivsi3>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	189b      	adds	r3, r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fca:	e002      	b.n	8000fd2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1f9      	bne.n	8000fcc <HAL_ADC_ConfigChannel+0x158>
 8000fd8:	e02b      	b.n	8001032 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	4099      	lsls	r1, r3
 8000fe8:	000b      	movs	r3, r1
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b10      	cmp	r3, #16
 8000ffa:	d003      	beq.n	8001004 <HAL_ADC_ConfigChannel+0x190>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b11      	cmp	r3, #17
 8001002:	d116      	bne.n	8001032 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_ADC_ConfigChannel+0x1d8>)
 8001006:	6819      	ldr	r1, [r3, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b10      	cmp	r3, #16
 800100e:	d101      	bne.n	8001014 <HAL_ADC_ConfigChannel+0x1a0>
 8001010:	4a11      	ldr	r2, [pc, #68]	; (8001058 <HAL_ADC_ConfigChannel+0x1e4>)
 8001012:	e000      	b.n	8001016 <HAL_ADC_ConfigChannel+0x1a2>
 8001014:	4a11      	ldr	r2, [pc, #68]	; (800105c <HAL_ADC_ConfigChannel+0x1e8>)
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_ADC_ConfigChannel+0x1d8>)
 8001018:	400a      	ands	r2, r1
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	e009      	b.n	8001032 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001022:	2220      	movs	r2, #32
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800102a:	230f      	movs	r3, #15
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2234      	movs	r2, #52	; 0x34
 8001036:	2100      	movs	r1, #0
 8001038:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800103a:	230f      	movs	r3, #15
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	781b      	ldrb	r3, [r3, #0]
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	b004      	add	sp, #16
 8001046:	bd80      	pop	{r7, pc}
 8001048:	00001001 	.word	0x00001001
 800104c:	40012708 	.word	0x40012708
 8001050:	20000000 	.word	0x20000000
 8001054:	000f4240 	.word	0x000f4240
 8001058:	ff7fffff 	.word	0xff7fffff
 800105c:	ffbfffff 	.word	0xffbfffff

08001060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	0002      	movs	r2, r0
 8001068:	1dfb      	adds	r3, r7, #7
 800106a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b7f      	cmp	r3, #127	; 0x7f
 8001072:	d809      	bhi.n	8001088 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	001a      	movs	r2, r3
 800107a:	231f      	movs	r3, #31
 800107c:	401a      	ands	r2, r3
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <__NVIC_EnableIRQ+0x30>)
 8001080:	2101      	movs	r1, #1
 8001082:	4091      	lsls	r1, r2
 8001084:	000a      	movs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
  }
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	b002      	add	sp, #8
 800108e:	bd80      	pop	{r7, pc}
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	0002      	movs	r2, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b7f      	cmp	r3, #127	; 0x7f
 80010a8:	d828      	bhi.n	80010fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010aa:	4a2f      	ldr	r2, [pc, #188]	; (8001168 <__NVIC_SetPriority+0xd4>)
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	33c0      	adds	r3, #192	; 0xc0
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	589b      	ldr	r3, [r3, r2]
 80010ba:	1dfa      	adds	r2, r7, #7
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	0011      	movs	r1, r2
 80010c0:	2203      	movs	r2, #3
 80010c2:	400a      	ands	r2, r1
 80010c4:	00d2      	lsls	r2, r2, #3
 80010c6:	21ff      	movs	r1, #255	; 0xff
 80010c8:	4091      	lsls	r1, r2
 80010ca:	000a      	movs	r2, r1
 80010cc:	43d2      	mvns	r2, r2
 80010ce:	401a      	ands	r2, r3
 80010d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	019b      	lsls	r3, r3, #6
 80010d6:	22ff      	movs	r2, #255	; 0xff
 80010d8:	401a      	ands	r2, r3
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	0018      	movs	r0, r3
 80010e0:	2303      	movs	r3, #3
 80010e2:	4003      	ands	r3, r0
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e8:	481f      	ldr	r0, [pc, #124]	; (8001168 <__NVIC_SetPriority+0xd4>)
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	430a      	orrs	r2, r1
 80010f4:	33c0      	adds	r3, #192	; 0xc0
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010fa:	e031      	b.n	8001160 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010fc:	4a1b      	ldr	r2, [pc, #108]	; (800116c <__NVIC_SetPriority+0xd8>)
 80010fe:	1dfb      	adds	r3, r7, #7
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	0019      	movs	r1, r3
 8001104:	230f      	movs	r3, #15
 8001106:	400b      	ands	r3, r1
 8001108:	3b08      	subs	r3, #8
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3306      	adds	r3, #6
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	18d3      	adds	r3, r2, r3
 8001112:	3304      	adds	r3, #4
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	1dfa      	adds	r2, r7, #7
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	0011      	movs	r1, r2
 800111c:	2203      	movs	r2, #3
 800111e:	400a      	ands	r2, r1
 8001120:	00d2      	lsls	r2, r2, #3
 8001122:	21ff      	movs	r1, #255	; 0xff
 8001124:	4091      	lsls	r1, r2
 8001126:	000a      	movs	r2, r1
 8001128:	43d2      	mvns	r2, r2
 800112a:	401a      	ands	r2, r3
 800112c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	019b      	lsls	r3, r3, #6
 8001132:	22ff      	movs	r2, #255	; 0xff
 8001134:	401a      	ands	r2, r3
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	0018      	movs	r0, r3
 800113c:	2303      	movs	r3, #3
 800113e:	4003      	ands	r3, r0
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001144:	4809      	ldr	r0, [pc, #36]	; (800116c <__NVIC_SetPriority+0xd8>)
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	001c      	movs	r4, r3
 800114c:	230f      	movs	r3, #15
 800114e:	4023      	ands	r3, r4
 8001150:	3b08      	subs	r3, #8
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	430a      	orrs	r2, r1
 8001156:	3306      	adds	r3, #6
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	18c3      	adds	r3, r0, r3
 800115c:	3304      	adds	r3, #4
 800115e:	601a      	str	r2, [r3, #0]
}
 8001160:	46c0      	nop			; (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	b003      	add	sp, #12
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	1e5a      	subs	r2, r3, #1
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	045b      	lsls	r3, r3, #17
 8001180:	429a      	cmp	r2, r3
 8001182:	d301      	bcc.n	8001188 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001184:	2301      	movs	r3, #1
 8001186:	e010      	b.n	80011aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <SysTick_Config+0x44>)
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	3a01      	subs	r2, #1
 800118e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001190:	2301      	movs	r3, #1
 8001192:	425b      	negs	r3, r3
 8001194:	2103      	movs	r1, #3
 8001196:	0018      	movs	r0, r3
 8001198:	f7ff ff7c 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <SysTick_Config+0x44>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SysTick_Config+0x44>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	0018      	movs	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b002      	add	sp, #8
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	210f      	movs	r1, #15
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	1c02      	adds	r2, r0, #0
 80011c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	0011      	movs	r1, r2
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff ff5d 	bl	8001094 <__NVIC_SetPriority>
}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b004      	add	sp, #16
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	0002      	movs	r2, r0
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7ff ff33 	bl	8001060 <__NVIC_EnableIRQ>
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff ffaf 	bl	8001170 <SysTick_Config>
 8001212:	0003      	movs	r3, r0
}
 8001214:	0018      	movs	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	b002      	add	sp, #8
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2221      	movs	r2, #33	; 0x21
 8001228:	5c9b      	ldrb	r3, [r3, r2]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d008      	beq.n	8001242 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2204      	movs	r2, #4
 8001234:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2220      	movs	r2, #32
 800123a:	2100      	movs	r1, #0
 800123c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e020      	b.n	8001284 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	210e      	movs	r1, #14
 800124e:	438a      	bics	r2, r1
 8001250:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2101      	movs	r1, #1
 800125e:	438a      	bics	r2, r1
 8001260:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126a:	2101      	movs	r1, #1
 800126c:	4091      	lsls	r1, r2
 800126e:	000a      	movs	r2, r1
 8001270:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2221      	movs	r2, #33	; 0x21
 8001276:	2101      	movs	r1, #1
 8001278:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2220      	movs	r2, #32
 800127e:	2100      	movs	r1, #0
 8001280:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	0018      	movs	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001294:	210f      	movs	r1, #15
 8001296:	187b      	adds	r3, r7, r1
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2221      	movs	r2, #33	; 0x21
 80012a0:	5c9b      	ldrb	r3, [r3, r2]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d006      	beq.n	80012b6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2204      	movs	r2, #4
 80012ac:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	e028      	b.n	8001308 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	210e      	movs	r1, #14
 80012c2:	438a      	bics	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2101      	movs	r1, #1
 80012d2:	438a      	bics	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012de:	2101      	movs	r1, #1
 80012e0:	4091      	lsls	r1, r2
 80012e2:	000a      	movs	r2, r1
 80012e4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2221      	movs	r2, #33	; 0x21
 80012ea:	2101      	movs	r1, #1
 80012ec:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2220      	movs	r2, #32
 80012f2:	2100      	movs	r1, #0
 80012f4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d004      	beq.n	8001308 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	0010      	movs	r0, r2
 8001306:	4798      	blx	r3
    } 
  }
  return status;
 8001308:	230f      	movs	r3, #15
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	781b      	ldrb	r3, [r3, #0]
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	b004      	add	sp, #16
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001326:	e14f      	b.n	80015c8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2101      	movs	r1, #1
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4091      	lsls	r1, r2
 8001332:	000a      	movs	r2, r1
 8001334:	4013      	ands	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d100      	bne.n	8001340 <HAL_GPIO_Init+0x28>
 800133e:	e140      	b.n	80015c2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2203      	movs	r2, #3
 8001346:	4013      	ands	r3, r2
 8001348:	2b01      	cmp	r3, #1
 800134a:	d005      	beq.n	8001358 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2203      	movs	r2, #3
 8001352:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001354:	2b02      	cmp	r3, #2
 8001356:	d130      	bne.n	80013ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	409a      	lsls	r2, r3
 8001366:	0013      	movs	r3, r2
 8001368:	43da      	mvns	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	409a      	lsls	r2, r3
 800137a:	0013      	movs	r3, r2
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800138e:	2201      	movs	r2, #1
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	43da      	mvns	r2, r3
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	2201      	movs	r2, #1
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2203      	movs	r2, #3
 80013c0:	4013      	ands	r3, r2
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d017      	beq.n	80013f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	2203      	movs	r2, #3
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	43da      	mvns	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	689a      	ldr	r2, [r3, #8]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	409a      	lsls	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2203      	movs	r2, #3
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d123      	bne.n	800144a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	08da      	lsrs	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3208      	adds	r2, #8
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	58d3      	ldr	r3, [r2, r3]
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	2207      	movs	r2, #7
 8001414:	4013      	ands	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	220f      	movs	r2, #15
 800141a:	409a      	lsls	r2, r3
 800141c:	0013      	movs	r3, r2
 800141e:	43da      	mvns	r2, r3
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2107      	movs	r1, #7
 800142e:	400b      	ands	r3, r1
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	409a      	lsls	r2, r3
 8001434:	0013      	movs	r3, r2
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	08da      	lsrs	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3208      	adds	r2, #8
 8001444:	0092      	lsls	r2, r2, #2
 8001446:	6939      	ldr	r1, [r7, #16]
 8001448:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	2203      	movs	r2, #3
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	43da      	mvns	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2203      	movs	r2, #3
 8001468:	401a      	ands	r2, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	409a      	lsls	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	23c0      	movs	r3, #192	; 0xc0
 8001484:	029b      	lsls	r3, r3, #10
 8001486:	4013      	ands	r3, r2
 8001488:	d100      	bne.n	800148c <HAL_GPIO_Init+0x174>
 800148a:	e09a      	b.n	80015c2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148c:	4b54      	ldr	r3, [pc, #336]	; (80015e0 <HAL_GPIO_Init+0x2c8>)
 800148e:	699a      	ldr	r2, [r3, #24]
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <HAL_GPIO_Init+0x2c8>)
 8001492:	2101      	movs	r1, #1
 8001494:	430a      	orrs	r2, r1
 8001496:	619a      	str	r2, [r3, #24]
 8001498:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <HAL_GPIO_Init+0x2c8>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	2201      	movs	r2, #1
 800149e:	4013      	ands	r3, r2
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014a4:	4a4f      	ldr	r2, [pc, #316]	; (80015e4 <HAL_GPIO_Init+0x2cc>)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	589b      	ldr	r3, [r3, r2]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2203      	movs	r2, #3
 80014b6:	4013      	ands	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	220f      	movs	r2, #15
 80014bc:	409a      	lsls	r2, r3
 80014be:	0013      	movs	r3, r2
 80014c0:	43da      	mvns	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	2390      	movs	r3, #144	; 0x90
 80014cc:	05db      	lsls	r3, r3, #23
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d013      	beq.n	80014fa <HAL_GPIO_Init+0x1e2>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a44      	ldr	r2, [pc, #272]	; (80015e8 <HAL_GPIO_Init+0x2d0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d00d      	beq.n	80014f6 <HAL_GPIO_Init+0x1de>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a43      	ldr	r2, [pc, #268]	; (80015ec <HAL_GPIO_Init+0x2d4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d007      	beq.n	80014f2 <HAL_GPIO_Init+0x1da>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a42      	ldr	r2, [pc, #264]	; (80015f0 <HAL_GPIO_Init+0x2d8>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d101      	bne.n	80014ee <HAL_GPIO_Init+0x1d6>
 80014ea:	2303      	movs	r3, #3
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x1e4>
 80014ee:	2305      	movs	r3, #5
 80014f0:	e004      	b.n	80014fc <HAL_GPIO_Init+0x1e4>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_Init+0x1e4>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_GPIO_Init+0x1e4>
 80014fa:	2300      	movs	r3, #0
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	2103      	movs	r1, #3
 8001500:	400a      	ands	r2, r1
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4093      	lsls	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800150c:	4935      	ldr	r1, [pc, #212]	; (80015e4 <HAL_GPIO_Init+0x2cc>)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800151a:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <HAL_GPIO_Init+0x2dc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	43da      	mvns	r2, r3
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	025b      	lsls	r3, r3, #9
 8001532:	4013      	ands	r3, r2
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800153e:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <HAL_GPIO_Init+0x2dc>)
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <HAL_GPIO_Init+0x2dc>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43da      	mvns	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	029b      	lsls	r3, r3, #10
 800155c:	4013      	ands	r3, r2
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001568:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <HAL_GPIO_Init+0x2dc>)
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <HAL_GPIO_Init+0x2dc>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43da      	mvns	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	035b      	lsls	r3, r3, #13
 8001586:	4013      	ands	r3, r2
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <HAL_GPIO_Init+0x2dc>)
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001598:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <HAL_GPIO_Init+0x2dc>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43da      	mvns	r2, r3
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	039b      	lsls	r3, r3, #14
 80015b0:	4013      	ands	r3, r2
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <HAL_GPIO_Init+0x2dc>)
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	40da      	lsrs	r2, r3
 80015d0:	1e13      	subs	r3, r2, #0
 80015d2:	d000      	beq.n	80015d6 <HAL_GPIO_Init+0x2be>
 80015d4:	e6a8      	b.n	8001328 <HAL_GPIO_Init+0x10>
  } 
}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b006      	add	sp, #24
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010000 	.word	0x40010000
 80015e8:	48000400 	.word	0x48000400
 80015ec:	48000800 	.word	0x48000800
 80015f0:	48000c00 	.word	0x48000c00
 80015f4:	40010400 	.word	0x40010400

080015f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	0008      	movs	r0, r1
 8001602:	0011      	movs	r1, r2
 8001604:	1cbb      	adds	r3, r7, #2
 8001606:	1c02      	adds	r2, r0, #0
 8001608:	801a      	strh	r2, [r3, #0]
 800160a:	1c7b      	adds	r3, r7, #1
 800160c:	1c0a      	adds	r2, r1, #0
 800160e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001610:	1c7b      	adds	r3, r7, #1
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001618:	1cbb      	adds	r3, r7, #2
 800161a:	881a      	ldrh	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001620:	e003      	b.n	800162a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001622:	1cbb      	adds	r3, r7, #2
 8001624:	881a      	ldrh	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	629a      	str	r2, [r3, #40]	; 0x28
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b002      	add	sp, #8
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e305      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2201      	movs	r2, #1
 800164c:	4013      	ands	r3, r2
 800164e:	d100      	bne.n	8001652 <HAL_RCC_OscConfig+0x1e>
 8001650:	e08d      	b.n	800176e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001652:	4bc5      	ldr	r3, [pc, #788]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	220c      	movs	r2, #12
 8001658:	4013      	ands	r3, r2
 800165a:	2b04      	cmp	r3, #4
 800165c:	d00e      	beq.n	800167c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800165e:	4bc2      	ldr	r3, [pc, #776]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	220c      	movs	r2, #12
 8001664:	4013      	ands	r3, r2
 8001666:	2b08      	cmp	r3, #8
 8001668:	d116      	bne.n	8001698 <HAL_RCC_OscConfig+0x64>
 800166a:	4bbf      	ldr	r3, [pc, #764]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	23c0      	movs	r3, #192	; 0xc0
 8001670:	025b      	lsls	r3, r3, #9
 8001672:	401a      	ands	r2, r3
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	025b      	lsls	r3, r3, #9
 8001678:	429a      	cmp	r2, r3
 800167a:	d10d      	bne.n	8001698 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	4bba      	ldr	r3, [pc, #744]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	029b      	lsls	r3, r3, #10
 8001684:	4013      	ands	r3, r2
 8001686:	d100      	bne.n	800168a <HAL_RCC_OscConfig+0x56>
 8001688:	e070      	b.n	800176c <HAL_RCC_OscConfig+0x138>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d000      	beq.n	8001694 <HAL_RCC_OscConfig+0x60>
 8001692:	e06b      	b.n	800176c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e2dc      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x7c>
 80016a0:	4bb1      	ldr	r3, [pc, #708]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4bb0      	ldr	r3, [pc, #704]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	0249      	lsls	r1, r1, #9
 80016aa:	430a      	orrs	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e02f      	b.n	8001710 <HAL_RCC_OscConfig+0xdc>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10c      	bne.n	80016d2 <HAL_RCC_OscConfig+0x9e>
 80016b8:	4bab      	ldr	r3, [pc, #684]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4baa      	ldr	r3, [pc, #680]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016be:	49ab      	ldr	r1, [pc, #684]	; (800196c <HAL_RCC_OscConfig+0x338>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	4ba8      	ldr	r3, [pc, #672]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4ba7      	ldr	r3, [pc, #668]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016ca:	49a9      	ldr	r1, [pc, #676]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80016cc:	400a      	ands	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e01e      	b.n	8001710 <HAL_RCC_OscConfig+0xdc>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	d10e      	bne.n	80016f8 <HAL_RCC_OscConfig+0xc4>
 80016da:	4ba3      	ldr	r3, [pc, #652]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4ba2      	ldr	r3, [pc, #648]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	02c9      	lsls	r1, r1, #11
 80016e4:	430a      	orrs	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	4b9f      	ldr	r3, [pc, #636]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b9e      	ldr	r3, [pc, #632]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016ee:	2180      	movs	r1, #128	; 0x80
 80016f0:	0249      	lsls	r1, r1, #9
 80016f2:	430a      	orrs	r2, r1
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0xdc>
 80016f8:	4b9b      	ldr	r3, [pc, #620]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b9a      	ldr	r3, [pc, #616]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80016fe:	499b      	ldr	r1, [pc, #620]	; (800196c <HAL_RCC_OscConfig+0x338>)
 8001700:	400a      	ands	r2, r1
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	4b98      	ldr	r3, [pc, #608]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b97      	ldr	r3, [pc, #604]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800170a:	4999      	ldr	r1, [pc, #612]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 800170c:	400a      	ands	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d014      	beq.n	8001742 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fa62 	bl	8000be0 <HAL_GetTick>
 800171c:	0003      	movs	r3, r0
 800171e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001722:	f7ff fa5d 	bl	8000be0 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	; 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e28e      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001734:	4b8c      	ldr	r3, [pc, #560]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	029b      	lsls	r3, r3, #10
 800173c:	4013      	ands	r3, r2
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0xee>
 8001740:	e015      	b.n	800176e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fa4d 	bl	8000be0 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fa48 	bl	8000be0 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	; 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e279      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175e:	4b82      	ldr	r3, [pc, #520]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	2380      	movs	r3, #128	; 0x80
 8001764:	029b      	lsls	r3, r3, #10
 8001766:	4013      	ands	r3, r2
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x118>
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d100      	bne.n	800177a <HAL_RCC_OscConfig+0x146>
 8001778:	e06c      	b.n	8001854 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800177a:	4b7b      	ldr	r3, [pc, #492]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	220c      	movs	r2, #12
 8001780:	4013      	ands	r3, r2
 8001782:	d00e      	beq.n	80017a2 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001784:	4b78      	ldr	r3, [pc, #480]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	220c      	movs	r2, #12
 800178a:	4013      	ands	r3, r2
 800178c:	2b08      	cmp	r3, #8
 800178e:	d11f      	bne.n	80017d0 <HAL_RCC_OscConfig+0x19c>
 8001790:	4b75      	ldr	r3, [pc, #468]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	23c0      	movs	r3, #192	; 0xc0
 8001796:	025b      	lsls	r3, r3, #9
 8001798:	401a      	ands	r2, r3
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	429a      	cmp	r2, r3
 80017a0:	d116      	bne.n	80017d0 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a2:	4b71      	ldr	r3, [pc, #452]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2202      	movs	r2, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_OscConfig+0x184>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e24c      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b8:	4b6b      	ldr	r3, [pc, #428]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	22f8      	movs	r2, #248	; 0xf8
 80017be:	4393      	bics	r3, r2
 80017c0:	0019      	movs	r1, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	00da      	lsls	r2, r3, #3
 80017c8:	4b67      	ldr	r3, [pc, #412]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80017ca:	430a      	orrs	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	e041      	b.n	8001854 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d024      	beq.n	8001822 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d8:	4b63      	ldr	r3, [pc, #396]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b62      	ldr	r3, [pc, #392]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80017de:	2101      	movs	r1, #1
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff f9fc 	bl	8000be0 <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ee:	f7ff f9f7 	bl	8000be0 <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e228      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	4b59      	ldr	r3, [pc, #356]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2202      	movs	r2, #2
 8001806:	4013      	ands	r3, r2
 8001808:	d0f1      	beq.n	80017ee <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180a:	4b57      	ldr	r3, [pc, #348]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	22f8      	movs	r2, #248	; 0xf8
 8001810:	4393      	bics	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	00da      	lsls	r2, r3, #3
 800181a:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800181c:	430a      	orrs	r2, r1
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e018      	b.n	8001854 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001822:	4b51      	ldr	r3, [pc, #324]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b50      	ldr	r3, [pc, #320]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001828:	2101      	movs	r1, #1
 800182a:	438a      	bics	r2, r1
 800182c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff f9d7 	bl	8000be0 <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001838:	f7ff f9d2 	bl	8000be0 <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e203      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184a:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2202      	movs	r2, #2
 8001850:	4013      	ands	r3, r2
 8001852:	d1f1      	bne.n	8001838 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2208      	movs	r2, #8
 800185a:	4013      	ands	r3, r2
 800185c:	d036      	beq.n	80018cc <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d019      	beq.n	800189a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001866:	4b40      	ldr	r3, [pc, #256]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800186c:	2101      	movs	r1, #1
 800186e:	430a      	orrs	r2, r1
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff f9b5 	bl	8000be0 <HAL_GetTick>
 8001876:	0003      	movs	r3, r0
 8001878:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187c:	f7ff f9b0 	bl	8000be0 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e1e1      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188e:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	2202      	movs	r2, #2
 8001894:	4013      	ands	r3, r2
 8001896:	d0f1      	beq.n	800187c <HAL_RCC_OscConfig+0x248>
 8001898:	e018      	b.n	80018cc <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189a:	4b33      	ldr	r3, [pc, #204]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800189c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80018a0:	2101      	movs	r1, #1
 80018a2:	438a      	bics	r2, r1
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff f99b 	bl	8000be0 <HAL_GetTick>
 80018aa:	0003      	movs	r3, r0
 80018ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b0:	f7ff f996 	bl	8000be0 <HAL_GetTick>
 80018b4:	0002      	movs	r2, r0
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e1c7      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c2:	4b29      	ldr	r3, [pc, #164]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	2202      	movs	r2, #2
 80018c8:	4013      	ands	r3, r2
 80018ca:	d1f1      	bne.n	80018b0 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2204      	movs	r2, #4
 80018d2:	4013      	ands	r3, r2
 80018d4:	d100      	bne.n	80018d8 <HAL_RCC_OscConfig+0x2a4>
 80018d6:	e0b5      	b.n	8001a44 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d8:	201f      	movs	r0, #31
 80018da:	183b      	adds	r3, r7, r0
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e0:	4b21      	ldr	r3, [pc, #132]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80018e2:	69da      	ldr	r2, [r3, #28]
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	055b      	lsls	r3, r3, #21
 80018e8:	4013      	ands	r3, r2
 80018ea:	d110      	bne.n	800190e <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80018ee:	69da      	ldr	r2, [r3, #28]
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	0549      	lsls	r1, r1, #21
 80018f6:	430a      	orrs	r2, r1
 80018f8:	61da      	str	r2, [r3, #28]
 80018fa:	4b1b      	ldr	r3, [pc, #108]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 80018fc:	69da      	ldr	r2, [r3, #28]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	055b      	lsls	r3, r3, #21
 8001902:	4013      	ands	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001908:	183b      	adds	r3, r7, r0
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_RCC_OscConfig+0x340>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4013      	ands	r3, r2
 8001918:	d11a      	bne.n	8001950 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <HAL_RCC_OscConfig+0x340>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_RCC_OscConfig+0x340>)
 8001920:	2180      	movs	r1, #128	; 0x80
 8001922:	0049      	lsls	r1, r1, #1
 8001924:	430a      	orrs	r2, r1
 8001926:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001928:	f7ff f95a 	bl	8000be0 <HAL_GetTick>
 800192c:	0003      	movs	r3, r0
 800192e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001932:	f7ff f955 	bl	8000be0 <HAL_GetTick>
 8001936:	0002      	movs	r2, r0
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b64      	cmp	r3, #100	; 0x64
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e186      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_RCC_OscConfig+0x340>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4013      	ands	r3, r2
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d10f      	bne.n	8001978 <HAL_RCC_OscConfig+0x344>
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800195a:	6a1a      	ldr	r2, [r3, #32]
 800195c:	4b02      	ldr	r3, [pc, #8]	; (8001968 <HAL_RCC_OscConfig+0x334>)
 800195e:	2101      	movs	r1, #1
 8001960:	430a      	orrs	r2, r1
 8001962:	621a      	str	r2, [r3, #32]
 8001964:	e036      	b.n	80019d4 <HAL_RCC_OscConfig+0x3a0>
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	40021000 	.word	0x40021000
 800196c:	fffeffff 	.word	0xfffeffff
 8001970:	fffbffff 	.word	0xfffbffff
 8001974:	40007000 	.word	0x40007000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10c      	bne.n	800199a <HAL_RCC_OscConfig+0x366>
 8001980:	4bb6      	ldr	r3, [pc, #728]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001982:	6a1a      	ldr	r2, [r3, #32]
 8001984:	4bb5      	ldr	r3, [pc, #724]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001986:	2101      	movs	r1, #1
 8001988:	438a      	bics	r2, r1
 800198a:	621a      	str	r2, [r3, #32]
 800198c:	4bb3      	ldr	r3, [pc, #716]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 800198e:	6a1a      	ldr	r2, [r3, #32]
 8001990:	4bb2      	ldr	r3, [pc, #712]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001992:	2104      	movs	r1, #4
 8001994:	438a      	bics	r2, r1
 8001996:	621a      	str	r2, [r3, #32]
 8001998:	e01c      	b.n	80019d4 <HAL_RCC_OscConfig+0x3a0>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b05      	cmp	r3, #5
 80019a0:	d10c      	bne.n	80019bc <HAL_RCC_OscConfig+0x388>
 80019a2:	4bae      	ldr	r3, [pc, #696]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019a4:	6a1a      	ldr	r2, [r3, #32]
 80019a6:	4bad      	ldr	r3, [pc, #692]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019a8:	2104      	movs	r1, #4
 80019aa:	430a      	orrs	r2, r1
 80019ac:	621a      	str	r2, [r3, #32]
 80019ae:	4bab      	ldr	r3, [pc, #684]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019b0:	6a1a      	ldr	r2, [r3, #32]
 80019b2:	4baa      	ldr	r3, [pc, #680]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	621a      	str	r2, [r3, #32]
 80019ba:	e00b      	b.n	80019d4 <HAL_RCC_OscConfig+0x3a0>
 80019bc:	4ba7      	ldr	r3, [pc, #668]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019be:	6a1a      	ldr	r2, [r3, #32]
 80019c0:	4ba6      	ldr	r3, [pc, #664]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	438a      	bics	r2, r1
 80019c6:	621a      	str	r2, [r3, #32]
 80019c8:	4ba4      	ldr	r3, [pc, #656]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019ca:	6a1a      	ldr	r2, [r3, #32]
 80019cc:	4ba3      	ldr	r3, [pc, #652]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019ce:	2104      	movs	r1, #4
 80019d0:	438a      	bics	r2, r1
 80019d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d014      	beq.n	8001a06 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff f900 	bl	8000be0 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e4:	e009      	b.n	80019fa <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	f7ff f8fb 	bl	8000be0 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4a9b      	ldr	r2, [pc, #620]	; (8001c60 <HAL_RCC_OscConfig+0x62c>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e12b      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019fa:	4b98      	ldr	r3, [pc, #608]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	2202      	movs	r2, #2
 8001a00:	4013      	ands	r3, r2
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x3b2>
 8001a04:	e013      	b.n	8001a2e <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff f8eb 	bl	8000be0 <HAL_GetTick>
 8001a0a:	0003      	movs	r3, r0
 8001a0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0e:	e009      	b.n	8001a24 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a10:	f7ff f8e6 	bl	8000be0 <HAL_GetTick>
 8001a14:	0002      	movs	r2, r0
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	4a91      	ldr	r2, [pc, #580]	; (8001c60 <HAL_RCC_OscConfig+0x62c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e116      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a24:	4b8d      	ldr	r3, [pc, #564]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a2e:	231f      	movs	r3, #31
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d105      	bne.n	8001a44 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a38:	4b88      	ldr	r3, [pc, #544]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a3a:	69da      	ldr	r2, [r3, #28]
 8001a3c:	4b87      	ldr	r3, [pc, #540]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a3e:	4989      	ldr	r1, [pc, #548]	; (8001c64 <HAL_RCC_OscConfig+0x630>)
 8001a40:	400a      	ands	r2, r1
 8001a42:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2210      	movs	r2, #16
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d063      	beq.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d12a      	bne.n	8001aac <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a56:	4b81      	ldr	r3, [pc, #516]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5a:	4b80      	ldr	r3, [pc, #512]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a62:	4b7e      	ldr	r3, [pc, #504]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a66:	4b7d      	ldr	r3, [pc, #500]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a68:	2101      	movs	r1, #1
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff f8b7 	bl	8000be0 <HAL_GetTick>
 8001a72:	0003      	movs	r3, r0
 8001a74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a78:	f7ff f8b2 	bl	8000be0 <HAL_GetTick>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e0e3      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a8a:	4b74      	ldr	r3, [pc, #464]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8e:	2202      	movs	r2, #2
 8001a90:	4013      	ands	r3, r2
 8001a92:	d0f1      	beq.n	8001a78 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a94:	4b71      	ldr	r3, [pc, #452]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a98:	22f8      	movs	r2, #248	; 0xf8
 8001a9a:	4393      	bics	r3, r2
 8001a9c:	0019      	movs	r1, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	00da      	lsls	r2, r3, #3
 8001aa4:	4b6d      	ldr	r3, [pc, #436]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	635a      	str	r2, [r3, #52]	; 0x34
 8001aaa:	e034      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	3305      	adds	r3, #5
 8001ab2:	d111      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ab4:	4b69      	ldr	r3, [pc, #420]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab8:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001aba:	2104      	movs	r1, #4
 8001abc:	438a      	bics	r2, r1
 8001abe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ac0:	4b66      	ldr	r3, [pc, #408]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac4:	22f8      	movs	r2, #248	; 0xf8
 8001ac6:	4393      	bics	r3, r2
 8001ac8:	0019      	movs	r1, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	00da      	lsls	r2, r3, #3
 8001ad0:	4b62      	ldr	r3, [pc, #392]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ad6:	e01e      	b.n	8001b16 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ad8:	4b60      	ldr	r3, [pc, #384]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001adc:	4b5f      	ldr	r3, [pc, #380]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001ade:	2104      	movs	r1, #4
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ae4:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae8:	4b5c      	ldr	r3, [pc, #368]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	438a      	bics	r2, r1
 8001aee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af0:	f7ff f876 	bl	8000be0 <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001afa:	f7ff f871 	bl	8000be0 <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e0a2      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b10:	2202      	movs	r2, #2
 8001b12:	4013      	ands	r3, r2
 8001b14:	d1f1      	bne.n	8001afa <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d100      	bne.n	8001b20 <HAL_RCC_OscConfig+0x4ec>
 8001b1e:	e097      	b.n	8001c50 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b20:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	220c      	movs	r2, #12
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d100      	bne.n	8001b2e <HAL_RCC_OscConfig+0x4fa>
 8001b2c:	e06b      	b.n	8001c06 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d14c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b36:	4b49      	ldr	r3, [pc, #292]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b3c:	494a      	ldr	r1, [pc, #296]	; (8001c68 <HAL_RCC_OscConfig+0x634>)
 8001b3e:	400a      	ands	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b42:	f7ff f84d 	bl	8000be0 <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff f848 	bl	8000be0 <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e079      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	049b      	lsls	r3, r3, #18
 8001b66:	4013      	ands	r3, r2
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b6a:	4b3c      	ldr	r3, [pc, #240]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	220f      	movs	r2, #15
 8001b70:	4393      	bics	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b78:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4a3a      	ldr	r2, [pc, #232]	; (8001c6c <HAL_RCC_OscConfig+0x638>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	0019      	movs	r1, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	431a      	orrs	r2, r3
 8001b92:	4b32      	ldr	r3, [pc, #200]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b94:	430a      	orrs	r2, r1
 8001b96:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b98:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001b9e:	2180      	movs	r1, #128	; 0x80
 8001ba0:	0449      	lsls	r1, r1, #17
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff f81b 	bl	8000be0 <HAL_GetTick>
 8001baa:	0003      	movs	r3, r0
 8001bac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff f816 	bl	8000be0 <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e047      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc2:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	049b      	lsls	r3, r3, #18
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x57c>
 8001bce:	e03f      	b.n	8001c50 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd0:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b21      	ldr	r3, [pc, #132]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001bd6:	4924      	ldr	r1, [pc, #144]	; (8001c68 <HAL_RCC_OscConfig+0x634>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f800 	bl	8000be0 <HAL_GetTick>
 8001be0:	0003      	movs	r3, r0
 8001be2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be6:	f7fe fffb 	bl	8000be0 <HAL_GetTick>
 8001bea:	0002      	movs	r2, r0
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e02c      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	049b      	lsls	r3, r3, #18
 8001c00:	4013      	ands	r3, r2
 8001c02:	d1f0      	bne.n	8001be6 <HAL_RCC_OscConfig+0x5b2>
 8001c04:	e024      	b.n	8001c50 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d101      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e01f      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_RCC_OscConfig+0x628>)
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	23c0      	movs	r3, #192	; 0xc0
 8001c22:	025b      	lsls	r3, r3, #9
 8001c24:	401a      	ands	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d10e      	bne.n	8001c4c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	220f      	movs	r2, #15
 8001c32:	401a      	ands	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d107      	bne.n	8001c4c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	23f0      	movs	r3, #240	; 0xf0
 8001c40:	039b      	lsls	r3, r3, #14
 8001c42:	401a      	ands	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	0018      	movs	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b008      	add	sp, #32
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	00001388 	.word	0x00001388
 8001c64:	efffffff 	.word	0xefffffff
 8001c68:	feffffff 	.word	0xfeffffff
 8001c6c:	ffc27fff 	.word	0xffc27fff

08001c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b3      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c84:	4b5b      	ldr	r3, [pc, #364]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d911      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b58      	ldr	r3, [pc, #352]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4393      	bics	r3, r2
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	4b55      	ldr	r3, [pc, #340]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca4:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4013      	ands	r3, r2
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e09a      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2202      	movs	r2, #2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d015      	beq.n	8001cec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d006      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001cca:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001cd0:	21e0      	movs	r1, #224	; 0xe0
 8001cd2:	00c9      	lsls	r1, r1, #3
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd8:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	22f0      	movs	r2, #240	; 0xf0
 8001cde:	4393      	bics	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d040      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d107      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	029b      	lsls	r3, r3, #10
 8001d06:	4013      	ands	r3, r2
 8001d08:	d114      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e06e      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d16:	4b38      	ldr	r3, [pc, #224]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	049b      	lsls	r3, r3, #18
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d108      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e062      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e05b      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d34:	4b30      	ldr	r3, [pc, #192]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	4393      	bics	r3, r2
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4b2d      	ldr	r3, [pc, #180]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d44:	430a      	orrs	r2, r1
 8001d46:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d48:	f7fe ff4a 	bl	8000be0 <HAL_GetTick>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d50:	e009      	b.n	8001d66 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d52:	f7fe ff45 	bl	8000be0 <HAL_GetTick>
 8001d56:	0002      	movs	r2, r0
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <HAL_RCC_ClockConfig+0x18c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e042      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1ec      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d78:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4013      	ands	r3, r2
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d211      	bcs.n	8001daa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4393      	bics	r3, r2
 8001d8e:	0019      	movs	r1, r3
 8001d90:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <HAL_RCC_ClockConfig+0x184>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e020      	b.n	8001dec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2204      	movs	r2, #4
 8001db0:	4013      	ands	r3, r2
 8001db2:	d009      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <HAL_RCC_ClockConfig+0x190>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dc8:	f000 f820 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8001dcc:	0001      	movs	r1, r0
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_RCC_ClockConfig+0x188>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_RCC_ClockConfig+0x194>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	000a      	movs	r2, r1
 8001dde:	40da      	lsrs	r2, r3
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_RCC_ClockConfig+0x198>)
 8001de2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001de4:	2000      	movs	r0, #0
 8001de6:	f7fe feb5 	bl	8000b54 <HAL_InitTick>
  
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	0018      	movs	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b004      	add	sp, #16
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40022000 	.word	0x40022000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	00001388 	.word	0x00001388
 8001e00:	fffff8ff 	.word	0xfffff8ff
 8001e04:	08004028 	.word	0x08004028
 8001e08:	20000000 	.word	0x20000000

08001e0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b08f      	sub	sp, #60	; 0x3c
 8001e10:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001e12:	2314      	movs	r3, #20
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	4a2c      	ldr	r2, [pc, #176]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e1a:	c313      	stmia	r3!, {r0, r1, r4}
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	4a2a      	ldr	r2, [pc, #168]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e24:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e26:	c313      	stmia	r3!, {r0, r1, r4}
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e30:	2300      	movs	r3, #0
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e34:	2300      	movs	r3, #0
 8001e36:	637b      	str	r3, [r7, #52]	; 0x34
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001e40:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e48:	220c      	movs	r2, #12
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d002      	beq.n	8001e56 <HAL_RCC_GetSysClockFreq+0x4a>
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d003      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x50>
 8001e54:	e02f      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e56:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e5a:	e02f      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5e:	0c9b      	lsrs	r3, r3, #18
 8001e60:	220f      	movs	r2, #15
 8001e62:	4013      	ands	r3, r2
 8001e64:	2214      	movs	r2, #20
 8001e66:	18ba      	adds	r2, r7, r2
 8001e68:	5cd3      	ldrb	r3, [r2, r3]
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	220f      	movs	r2, #15
 8001e72:	4013      	ands	r3, r2
 8001e74:	1d3a      	adds	r2, r7, #4
 8001e76:	5cd3      	ldrb	r3, [r2, r3]
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e7c:	23c0      	movs	r3, #192	; 0xc0
 8001e7e:	025b      	lsls	r3, r3, #9
 8001e80:	401a      	ands	r2, r3
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	025b      	lsls	r3, r3, #9
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d109      	bne.n	8001e9e <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e8c:	4811      	ldr	r0, [pc, #68]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e8e:	f7fe f93b 	bl	8000108 <__udivsi3>
 8001e92:	0003      	movs	r3, r0
 8001e94:	001a      	movs	r2, r3
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	4353      	muls	r3, r2
 8001e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ea0:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ea2:	f7fe f931 	bl	8000108 <__udivsi3>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	4353      	muls	r3, r2
 8001eae:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eb4:	e002      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eba:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b00f      	add	sp, #60	; 0x3c
 8001ec4:	bd90      	pop	{r4, r7, pc}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	08004008 	.word	0x08004008
 8001ecc:	08004018 	.word	0x08004018
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	007a1200 	.word	0x007a1200

08001ed8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001edc:	4b02      	ldr	r3, [pc, #8]	; (8001ee8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	20000000 	.word	0x20000000

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ef0:	f7ff fff2 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001ef4:	0001      	movs	r1, r0
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	2207      	movs	r2, #7
 8001efe:	4013      	ands	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f02:	5cd3      	ldrb	r3, [r2, r3]
 8001f04:	40d9      	lsrs	r1, r3
 8001f06:	000b      	movs	r3, r1
}    
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08004038 	.word	0x08004038

08001f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e042      	b.n	8001fb0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	223d      	movs	r2, #61	; 0x3d
 8001f2e:	5c9b      	ldrb	r3, [r3, r2]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d107      	bne.n	8001f46 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	223c      	movs	r2, #60	; 0x3c
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7fe fcaf 	bl	80008a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	223d      	movs	r2, #61	; 0x3d
 8001f4a:	2102      	movs	r1, #2
 8001f4c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3304      	adds	r3, #4
 8001f56:	0019      	movs	r1, r3
 8001f58:	0010      	movs	r0, r2
 8001f5a:	f000 fad1 	bl	8002500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2246      	movs	r2, #70	; 0x46
 8001f62:	2101      	movs	r1, #1
 8001f64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	223e      	movs	r2, #62	; 0x3e
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	5499      	strb	r1, [r3, r2]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	223f      	movs	r2, #63	; 0x3f
 8001f72:	2101      	movs	r1, #1
 8001f74:	5499      	strb	r1, [r3, r2]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2240      	movs	r2, #64	; 0x40
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	5499      	strb	r1, [r3, r2]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2241      	movs	r2, #65	; 0x41
 8001f82:	2101      	movs	r1, #1
 8001f84:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2242      	movs	r2, #66	; 0x42
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	5499      	strb	r1, [r3, r2]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2243      	movs	r2, #67	; 0x43
 8001f92:	2101      	movs	r1, #1
 8001f94:	5499      	strb	r1, [r3, r2]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2244      	movs	r2, #68	; 0x44
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	5499      	strb	r1, [r3, r2]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2245      	movs	r2, #69	; 0x45
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	223d      	movs	r2, #61	; 0x3d
 8001faa:	2101      	movs	r1, #1
 8001fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e042      	b.n	8002050 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	223d      	movs	r2, #61	; 0x3d
 8001fce:	5c9b      	ldrb	r3, [r3, r2]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d107      	bne.n	8001fe6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	223c      	movs	r2, #60	; 0x3c
 8001fda:	2100      	movs	r1, #0
 8001fdc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f000 f839 	bl	8002058 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	223d      	movs	r2, #61	; 0x3d
 8001fea:	2102      	movs	r1, #2
 8001fec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	0010      	movs	r0, r2
 8001ffa:	f000 fa81 	bl	8002500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2246      	movs	r2, #70	; 0x46
 8002002:	2101      	movs	r1, #1
 8002004:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	223e      	movs	r2, #62	; 0x3e
 800200a:	2101      	movs	r1, #1
 800200c:	5499      	strb	r1, [r3, r2]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	223f      	movs	r2, #63	; 0x3f
 8002012:	2101      	movs	r1, #1
 8002014:	5499      	strb	r1, [r3, r2]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2240      	movs	r2, #64	; 0x40
 800201a:	2101      	movs	r1, #1
 800201c:	5499      	strb	r1, [r3, r2]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2241      	movs	r2, #65	; 0x41
 8002022:	2101      	movs	r1, #1
 8002024:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2242      	movs	r2, #66	; 0x42
 800202a:	2101      	movs	r1, #1
 800202c:	5499      	strb	r1, [r3, r2]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2243      	movs	r2, #67	; 0x43
 8002032:	2101      	movs	r1, #1
 8002034:	5499      	strb	r1, [r3, r2]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2244      	movs	r2, #68	; 0x44
 800203a:	2101      	movs	r1, #1
 800203c:	5499      	strb	r1, [r3, r2]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2245      	movs	r2, #69	; 0x45
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	223d      	movs	r2, #61	; 0x3d
 800204a:	2101      	movs	r1, #1
 800204c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	0018      	movs	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	b002      	add	sp, #8
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b002      	add	sp, #8
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d108      	bne.n	800208a <HAL_TIM_PWM_Start+0x22>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	223e      	movs	r2, #62	; 0x3e
 800207c:	5c9b      	ldrb	r3, [r3, r2]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	1e5a      	subs	r2, r3, #1
 8002084:	4193      	sbcs	r3, r2
 8002086:	b2db      	uxtb	r3, r3
 8002088:	e01f      	b.n	80020ca <HAL_TIM_PWM_Start+0x62>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b04      	cmp	r3, #4
 800208e:	d108      	bne.n	80020a2 <HAL_TIM_PWM_Start+0x3a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	223f      	movs	r2, #63	; 0x3f
 8002094:	5c9b      	ldrb	r3, [r3, r2]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	1e5a      	subs	r2, r3, #1
 800209c:	4193      	sbcs	r3, r2
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	e013      	b.n	80020ca <HAL_TIM_PWM_Start+0x62>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d108      	bne.n	80020ba <HAL_TIM_PWM_Start+0x52>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2240      	movs	r2, #64	; 0x40
 80020ac:	5c9b      	ldrb	r3, [r3, r2]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	3b01      	subs	r3, #1
 80020b2:	1e5a      	subs	r2, r3, #1
 80020b4:	4193      	sbcs	r3, r2
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	e007      	b.n	80020ca <HAL_TIM_PWM_Start+0x62>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2241      	movs	r2, #65	; 0x41
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	3b01      	subs	r3, #1
 80020c4:	1e5a      	subs	r2, r3, #1
 80020c6:	4193      	sbcs	r3, r2
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06e      	b.n	80021b0 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d104      	bne.n	80020e2 <HAL_TIM_PWM_Start+0x7a>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	223e      	movs	r2, #62	; 0x3e
 80020dc:	2102      	movs	r1, #2
 80020de:	5499      	strb	r1, [r3, r2]
 80020e0:	e013      	b.n	800210a <HAL_TIM_PWM_Start+0xa2>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d104      	bne.n	80020f2 <HAL_TIM_PWM_Start+0x8a>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	223f      	movs	r2, #63	; 0x3f
 80020ec:	2102      	movs	r1, #2
 80020ee:	5499      	strb	r1, [r3, r2]
 80020f0:	e00b      	b.n	800210a <HAL_TIM_PWM_Start+0xa2>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d104      	bne.n	8002102 <HAL_TIM_PWM_Start+0x9a>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2240      	movs	r2, #64	; 0x40
 80020fc:	2102      	movs	r1, #2
 80020fe:	5499      	strb	r1, [r3, r2]
 8002100:	e003      	b.n	800210a <HAL_TIM_PWM_Start+0xa2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2241      	movs	r2, #65	; 0x41
 8002106:	2102      	movs	r1, #2
 8002108:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6839      	ldr	r1, [r7, #0]
 8002110:	2201      	movs	r2, #1
 8002112:	0018      	movs	r0, r3
 8002114:	f000 fd00 	bl	8002b18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <HAL_TIM_PWM_Start+0x150>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00e      	beq.n	8002140 <HAL_TIM_PWM_Start+0xd8>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a25      	ldr	r2, [pc, #148]	; (80021bc <HAL_TIM_PWM_Start+0x154>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d009      	beq.n	8002140 <HAL_TIM_PWM_Start+0xd8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a23      	ldr	r2, [pc, #140]	; (80021c0 <HAL_TIM_PWM_Start+0x158>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d004      	beq.n	8002140 <HAL_TIM_PWM_Start+0xd8>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a22      	ldr	r2, [pc, #136]	; (80021c4 <HAL_TIM_PWM_Start+0x15c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d101      	bne.n	8002144 <HAL_TIM_PWM_Start+0xdc>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <HAL_TIM_PWM_Start+0xde>
 8002144:	2300      	movs	r3, #0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2180      	movs	r1, #128	; 0x80
 8002156:	0209      	lsls	r1, r1, #8
 8002158:	430a      	orrs	r2, r1
 800215a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <HAL_TIM_PWM_Start+0x150>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d009      	beq.n	800217a <HAL_TIM_PWM_Start+0x112>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <HAL_TIM_PWM_Start+0x160>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d004      	beq.n	800217a <HAL_TIM_PWM_Start+0x112>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a11      	ldr	r2, [pc, #68]	; (80021bc <HAL_TIM_PWM_Start+0x154>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d111      	bne.n	800219e <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2207      	movs	r2, #7
 8002182:	4013      	ands	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b06      	cmp	r3, #6
 800218a:	d010      	beq.n	80021ae <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2101      	movs	r1, #1
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800219c:	e007      	b.n	80021ae <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2101      	movs	r1, #1
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b004      	add	sp, #16
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40012c00 	.word	0x40012c00
 80021bc:	40014000 	.word	0x40014000
 80021c0:	40014400 	.word	0x40014400
 80021c4:	40014800 	.word	0x40014800
 80021c8:	40000400 	.word	0x40000400

080021cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d8:	2317      	movs	r3, #23
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	223c      	movs	r2, #60	; 0x3c
 80021e4:	5c9b      	ldrb	r3, [r3, r2]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_TIM_PWM_ConfigChannel+0x22>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e0ad      	b.n	800234a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	223c      	movs	r2, #60	; 0x3c
 80021f2:	2101      	movs	r1, #1
 80021f4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b0c      	cmp	r3, #12
 80021fa:	d100      	bne.n	80021fe <HAL_TIM_PWM_ConfigChannel+0x32>
 80021fc:	e076      	b.n	80022ec <HAL_TIM_PWM_ConfigChannel+0x120>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b0c      	cmp	r3, #12
 8002202:	d900      	bls.n	8002206 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002204:	e095      	b.n	8002332 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d04e      	beq.n	80022aa <HAL_TIM_PWM_ConfigChannel+0xde>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b08      	cmp	r3, #8
 8002210:	d900      	bls.n	8002214 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002212:	e08e      	b.n	8002332 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_PWM_ConfigChannel+0x56>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d021      	beq.n	8002264 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002220:	e087      	b.n	8002332 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	0011      	movs	r1, r2
 800222a:	0018      	movs	r0, r3
 800222c:	f000 f9de 	bl	80025ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699a      	ldr	r2, [r3, #24]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2108      	movs	r1, #8
 800223c:	430a      	orrs	r2, r1
 800223e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	699a      	ldr	r2, [r3, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2104      	movs	r1, #4
 800224c:	438a      	bics	r2, r1
 800224e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6999      	ldr	r1, [r3, #24]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	619a      	str	r2, [r3, #24]
      break;
 8002262:	e06b      	b.n	800233c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	0011      	movs	r1, r2
 800226c:	0018      	movs	r0, r3
 800226e:	f000 fa45 	bl	80026fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2180      	movs	r1, #128	; 0x80
 800227e:	0109      	lsls	r1, r1, #4
 8002280:	430a      	orrs	r2, r1
 8002282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4931      	ldr	r1, [pc, #196]	; (8002354 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002290:	400a      	ands	r2, r1
 8002292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6999      	ldr	r1, [r3, #24]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	021a      	lsls	r2, r3, #8
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	619a      	str	r2, [r3, #24]
      break;
 80022a8:	e048      	b.n	800233c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	0011      	movs	r1, r2
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 faa6 	bl	8002804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69da      	ldr	r2, [r3, #28]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2108      	movs	r1, #8
 80022c4:	430a      	orrs	r2, r1
 80022c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	69da      	ldr	r2, [r3, #28]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2104      	movs	r1, #4
 80022d4:	438a      	bics	r2, r1
 80022d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	69d9      	ldr	r1, [r3, #28]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	61da      	str	r2, [r3, #28]
      break;
 80022ea:	e027      	b.n	800233c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	0011      	movs	r1, r2
 80022f4:	0018      	movs	r0, r3
 80022f6:	f000 fb0b 	bl	8002910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2180      	movs	r1, #128	; 0x80
 8002306:	0109      	lsls	r1, r1, #4
 8002308:	430a      	orrs	r2, r1
 800230a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69da      	ldr	r2, [r3, #28]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	490f      	ldr	r1, [pc, #60]	; (8002354 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002318:	400a      	ands	r2, r1
 800231a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69d9      	ldr	r1, [r3, #28]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	021a      	lsls	r2, r3, #8
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	61da      	str	r2, [r3, #28]
      break;
 8002330:	e004      	b.n	800233c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002332:	2317      	movs	r3, #23
 8002334:	18fb      	adds	r3, r7, r3
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
      break;
 800233a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	223c      	movs	r2, #60	; 0x3c
 8002340:	2100      	movs	r1, #0
 8002342:	5499      	strb	r1, [r3, r2]

  return status;
 8002344:	2317      	movs	r3, #23
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	781b      	ldrb	r3, [r3, #0]
}
 800234a:	0018      	movs	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	b006      	add	sp, #24
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	fffffbff 	.word	0xfffffbff

08002358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002362:	230f      	movs	r3, #15
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	223c      	movs	r2, #60	; 0x3c
 800236e:	5c9b      	ldrb	r3, [r3, r2]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_TIM_ConfigClockSource+0x20>
 8002374:	2302      	movs	r3, #2
 8002376:	e0bc      	b.n	80024f2 <HAL_TIM_ConfigClockSource+0x19a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	223c      	movs	r2, #60	; 0x3c
 800237c:	2101      	movs	r1, #1
 800237e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	223d      	movs	r2, #61	; 0x3d
 8002384:	2102      	movs	r1, #2
 8002386:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	2277      	movs	r2, #119	; 0x77
 8002394:	4393      	bics	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	4a58      	ldr	r2, [pc, #352]	; (80024fc <HAL_TIM_ConfigClockSource+0x1a4>)
 800239c:	4013      	ands	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2280      	movs	r2, #128	; 0x80
 80023ae:	0192      	lsls	r2, r2, #6
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d040      	beq.n	8002436 <HAL_TIM_ConfigClockSource+0xde>
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	0192      	lsls	r2, r2, #6
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d900      	bls.n	80023be <HAL_TIM_ConfigClockSource+0x66>
 80023bc:	e088      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x178>
 80023be:	2280      	movs	r2, #128	; 0x80
 80023c0:	0152      	lsls	r2, r2, #5
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d100      	bne.n	80023c8 <HAL_TIM_ConfigClockSource+0x70>
 80023c6:	e088      	b.n	80024da <HAL_TIM_ConfigClockSource+0x182>
 80023c8:	2280      	movs	r2, #128	; 0x80
 80023ca:	0152      	lsls	r2, r2, #5
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d900      	bls.n	80023d2 <HAL_TIM_ConfigClockSource+0x7a>
 80023d0:	e07e      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x178>
 80023d2:	2b70      	cmp	r3, #112	; 0x70
 80023d4:	d018      	beq.n	8002408 <HAL_TIM_ConfigClockSource+0xb0>
 80023d6:	d900      	bls.n	80023da <HAL_TIM_ConfigClockSource+0x82>
 80023d8:	e07a      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x178>
 80023da:	2b60      	cmp	r3, #96	; 0x60
 80023dc:	d04f      	beq.n	800247e <HAL_TIM_ConfigClockSource+0x126>
 80023de:	d900      	bls.n	80023e2 <HAL_TIM_ConfigClockSource+0x8a>
 80023e0:	e076      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x178>
 80023e2:	2b50      	cmp	r3, #80	; 0x50
 80023e4:	d03b      	beq.n	800245e <HAL_TIM_ConfigClockSource+0x106>
 80023e6:	d900      	bls.n	80023ea <HAL_TIM_ConfigClockSource+0x92>
 80023e8:	e072      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x178>
 80023ea:	2b40      	cmp	r3, #64	; 0x40
 80023ec:	d057      	beq.n	800249e <HAL_TIM_ConfigClockSource+0x146>
 80023ee:	d900      	bls.n	80023f2 <HAL_TIM_ConfigClockSource+0x9a>
 80023f0:	e06e      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x178>
 80023f2:	2b30      	cmp	r3, #48	; 0x30
 80023f4:	d063      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x166>
 80023f6:	d86b      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x178>
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d060      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x166>
 80023fc:	d868      	bhi.n	80024d0 <HAL_TIM_ConfigClockSource+0x178>
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d05d      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x166>
 8002402:	2b10      	cmp	r3, #16
 8002404:	d05b      	beq.n	80024be <HAL_TIM_ConfigClockSource+0x166>
 8002406:	e063      	b.n	80024d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	6899      	ldr	r1, [r3, #8]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f000 fb5e 	bl	8002ad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2277      	movs	r2, #119	; 0x77
 8002428:	4313      	orrs	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	609a      	str	r2, [r3, #8]
      break;
 8002434:	e052      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6899      	ldr	r1, [r3, #8]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f000 fb47 	bl	8002ad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2180      	movs	r1, #128	; 0x80
 8002456:	01c9      	lsls	r1, r1, #7
 8002458:	430a      	orrs	r2, r1
 800245a:	609a      	str	r2, [r3, #8]
      break;
 800245c:	e03e      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	001a      	movs	r2, r3
 800246c:	f000 faba 	bl	80029e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2150      	movs	r1, #80	; 0x50
 8002476:	0018      	movs	r0, r3
 8002478:	f000 fb14 	bl	8002aa4 <TIM_ITRx_SetConfig>
      break;
 800247c:	e02e      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6859      	ldr	r1, [r3, #4]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	001a      	movs	r2, r3
 800248c:	f000 fad8 	bl	8002a40 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2160      	movs	r1, #96	; 0x60
 8002496:	0018      	movs	r0, r3
 8002498:	f000 fb04 	bl	8002aa4 <TIM_ITRx_SetConfig>
      break;
 800249c:	e01e      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6859      	ldr	r1, [r3, #4]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	001a      	movs	r2, r3
 80024ac:	f000 fa9a 	bl	80029e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2140      	movs	r1, #64	; 0x40
 80024b6:	0018      	movs	r0, r3
 80024b8:	f000 faf4 	bl	8002aa4 <TIM_ITRx_SetConfig>
      break;
 80024bc:	e00e      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0019      	movs	r1, r3
 80024c8:	0010      	movs	r0, r2
 80024ca:	f000 faeb 	bl	8002aa4 <TIM_ITRx_SetConfig>
      break;
 80024ce:	e005      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80024d0:	230f      	movs	r3, #15
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2201      	movs	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]
      break;
 80024d8:	e000      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80024da:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	223d      	movs	r2, #61	; 0x3d
 80024e0:	2101      	movs	r1, #1
 80024e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	223c      	movs	r2, #60	; 0x3c
 80024e8:	2100      	movs	r1, #0
 80024ea:	5499      	strb	r1, [r3, r2]

  return status;
 80024ec:	230f      	movs	r3, #15
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	781b      	ldrb	r3, [r3, #0]
}
 80024f2:	0018      	movs	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b004      	add	sp, #16
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	ffff00ff 	.word	0xffff00ff

08002500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a2f      	ldr	r2, [pc, #188]	; (80025d0 <TIM_Base_SetConfig+0xd0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d003      	beq.n	8002520 <TIM_Base_SetConfig+0x20>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a2e      	ldr	r2, [pc, #184]	; (80025d4 <TIM_Base_SetConfig+0xd4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d108      	bne.n	8002532 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2270      	movs	r2, #112	; 0x70
 8002524:	4393      	bics	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a26      	ldr	r2, [pc, #152]	; (80025d0 <TIM_Base_SetConfig+0xd0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <TIM_Base_SetConfig+0x62>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a25      	ldr	r2, [pc, #148]	; (80025d4 <TIM_Base_SetConfig+0xd4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00f      	beq.n	8002562 <TIM_Base_SetConfig+0x62>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <TIM_Base_SetConfig+0xd8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00b      	beq.n	8002562 <TIM_Base_SetConfig+0x62>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a23      	ldr	r2, [pc, #140]	; (80025dc <TIM_Base_SetConfig+0xdc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <TIM_Base_SetConfig+0x62>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a22      	ldr	r2, [pc, #136]	; (80025e0 <TIM_Base_SetConfig+0xe0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d003      	beq.n	8002562 <TIM_Base_SetConfig+0x62>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <TIM_Base_SetConfig+0xe4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d108      	bne.n	8002574 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4a20      	ldr	r2, [pc, #128]	; (80025e8 <TIM_Base_SetConfig+0xe8>)
 8002566:	4013      	ands	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	4393      	bics	r3, r2
 800257a:	001a      	movs	r2, r3
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a0c      	ldr	r2, [pc, #48]	; (80025d0 <TIM_Base_SetConfig+0xd0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00b      	beq.n	80025ba <TIM_Base_SetConfig+0xba>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <TIM_Base_SetConfig+0xdc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d007      	beq.n	80025ba <TIM_Base_SetConfig+0xba>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <TIM_Base_SetConfig+0xe0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d003      	beq.n	80025ba <TIM_Base_SetConfig+0xba>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <TIM_Base_SetConfig+0xe4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d103      	bne.n	80025c2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	615a      	str	r2, [r3, #20]
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b004      	add	sp, #16
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40012c00 	.word	0x40012c00
 80025d4:	40000400 	.word	0x40000400
 80025d8:	40002000 	.word	0x40002000
 80025dc:	40014000 	.word	0x40014000
 80025e0:	40014400 	.word	0x40014400
 80025e4:	40014800 	.word	0x40014800
 80025e8:	fffffcff 	.word	0xfffffcff

080025ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	2201      	movs	r2, #1
 80025fc:	4393      	bics	r3, r2
 80025fe:	001a      	movs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2270      	movs	r2, #112	; 0x70
 800261a:	4393      	bics	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2203      	movs	r2, #3
 8002622:	4393      	bics	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2202      	movs	r2, #2
 8002634:	4393      	bics	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <TIM_OC1_SetConfig+0xf8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00b      	beq.n	8002662 <TIM_OC1_SetConfig+0x76>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a26      	ldr	r2, [pc, #152]	; (80026e8 <TIM_OC1_SetConfig+0xfc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d007      	beq.n	8002662 <TIM_OC1_SetConfig+0x76>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a25      	ldr	r2, [pc, #148]	; (80026ec <TIM_OC1_SetConfig+0x100>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d003      	beq.n	8002662 <TIM_OC1_SetConfig+0x76>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <TIM_OC1_SetConfig+0x104>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d10c      	bne.n	800267c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2208      	movs	r2, #8
 8002666:	4393      	bics	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2204      	movs	r2, #4
 8002678:	4393      	bics	r3, r2
 800267a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <TIM_OC1_SetConfig+0xf8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00b      	beq.n	800269c <TIM_OC1_SetConfig+0xb0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a18      	ldr	r2, [pc, #96]	; (80026e8 <TIM_OC1_SetConfig+0xfc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d007      	beq.n	800269c <TIM_OC1_SetConfig+0xb0>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a17      	ldr	r2, [pc, #92]	; (80026ec <TIM_OC1_SetConfig+0x100>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d003      	beq.n	800269c <TIM_OC1_SetConfig+0xb0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a16      	ldr	r2, [pc, #88]	; (80026f0 <TIM_OC1_SetConfig+0x104>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d111      	bne.n	80026c0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4a15      	ldr	r2, [pc, #84]	; (80026f4 <TIM_OC1_SetConfig+0x108>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <TIM_OC1_SetConfig+0x10c>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	621a      	str	r2, [r3, #32]
}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	b006      	add	sp, #24
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	40014000 	.word	0x40014000
 80026ec:	40014400 	.word	0x40014400
 80026f0:	40014800 	.word	0x40014800
 80026f4:	fffffeff 	.word	0xfffffeff
 80026f8:	fffffdff 	.word	0xfffffdff

080026fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	2210      	movs	r2, #16
 800270c:	4393      	bics	r3, r2
 800270e:	001a      	movs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4a2e      	ldr	r2, [pc, #184]	; (80027e4 <TIM_OC2_SetConfig+0xe8>)
 800272a:	4013      	ands	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4a2d      	ldr	r2, [pc, #180]	; (80027e8 <TIM_OC2_SetConfig+0xec>)
 8002732:	4013      	ands	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2220      	movs	r2, #32
 8002746:	4393      	bics	r3, r2
 8002748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	4313      	orrs	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a24      	ldr	r2, [pc, #144]	; (80027ec <TIM_OC2_SetConfig+0xf0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d10d      	bne.n	800277a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2280      	movs	r2, #128	; 0x80
 8002762:	4393      	bics	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2240      	movs	r2, #64	; 0x40
 8002776:	4393      	bics	r3, r2
 8002778:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a1b      	ldr	r2, [pc, #108]	; (80027ec <TIM_OC2_SetConfig+0xf0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00b      	beq.n	800279a <TIM_OC2_SetConfig+0x9e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a1a      	ldr	r2, [pc, #104]	; (80027f0 <TIM_OC2_SetConfig+0xf4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d007      	beq.n	800279a <TIM_OC2_SetConfig+0x9e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a19      	ldr	r2, [pc, #100]	; (80027f4 <TIM_OC2_SetConfig+0xf8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d003      	beq.n	800279a <TIM_OC2_SetConfig+0x9e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <TIM_OC2_SetConfig+0xfc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d113      	bne.n	80027c2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4a17      	ldr	r2, [pc, #92]	; (80027fc <TIM_OC2_SetConfig+0x100>)
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4a16      	ldr	r2, [pc, #88]	; (8002800 <TIM_OC2_SetConfig+0x104>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	621a      	str	r2, [r3, #32]
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b006      	add	sp, #24
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	ffff8fff 	.word	0xffff8fff
 80027e8:	fffffcff 	.word	0xfffffcff
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40014400 	.word	0x40014400
 80027f8:	40014800 	.word	0x40014800
 80027fc:	fffffbff 	.word	0xfffffbff
 8002800:	fffff7ff 	.word	0xfffff7ff

08002804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a35      	ldr	r2, [pc, #212]	; (80028e8 <TIM_OC3_SetConfig+0xe4>)
 8002814:	401a      	ands	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2270      	movs	r2, #112	; 0x70
 8002830:	4393      	bics	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2203      	movs	r2, #3
 8002838:	4393      	bics	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	4a28      	ldr	r2, [pc, #160]	; (80028ec <TIM_OC3_SetConfig+0xe8>)
 800284a:	4013      	ands	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a24      	ldr	r2, [pc, #144]	; (80028f0 <TIM_OC3_SetConfig+0xec>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10d      	bne.n	800287e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	4a23      	ldr	r2, [pc, #140]	; (80028f4 <TIM_OC3_SetConfig+0xf0>)
 8002866:	4013      	ands	r3, r2
 8002868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	4a1f      	ldr	r2, [pc, #124]	; (80028f8 <TIM_OC3_SetConfig+0xf4>)
 800287a:	4013      	ands	r3, r2
 800287c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <TIM_OC3_SetConfig+0xec>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00b      	beq.n	800289e <TIM_OC3_SetConfig+0x9a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <TIM_OC3_SetConfig+0xf8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <TIM_OC3_SetConfig+0x9a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a1b      	ldr	r2, [pc, #108]	; (8002900 <TIM_OC3_SetConfig+0xfc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d003      	beq.n	800289e <TIM_OC3_SetConfig+0x9a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <TIM_OC3_SetConfig+0x100>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d113      	bne.n	80028c6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4a19      	ldr	r2, [pc, #100]	; (8002908 <TIM_OC3_SetConfig+0x104>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4a18      	ldr	r2, [pc, #96]	; (800290c <TIM_OC3_SetConfig+0x108>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	621a      	str	r2, [r3, #32]
}
 80028e0:	46c0      	nop			; (mov r8, r8)
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b006      	add	sp, #24
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	fffffeff 	.word	0xfffffeff
 80028ec:	fffffdff 	.word	0xfffffdff
 80028f0:	40012c00 	.word	0x40012c00
 80028f4:	fffff7ff 	.word	0xfffff7ff
 80028f8:	fffffbff 	.word	0xfffffbff
 80028fc:	40014000 	.word	0x40014000
 8002900:	40014400 	.word	0x40014400
 8002904:	40014800 	.word	0x40014800
 8002908:	ffffefff 	.word	0xffffefff
 800290c:	ffffdfff 	.word	0xffffdfff

08002910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4a28      	ldr	r2, [pc, #160]	; (80029c0 <TIM_OC4_SetConfig+0xb0>)
 8002920:	401a      	ands	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <TIM_OC4_SetConfig+0xb4>)
 800293c:	4013      	ands	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <TIM_OC4_SetConfig+0xb8>)
 8002944:	4013      	ands	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	021b      	lsls	r3, r3, #8
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <TIM_OC4_SetConfig+0xbc>)
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	031b      	lsls	r3, r3, #12
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <TIM_OC4_SetConfig+0xc0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d00b      	beq.n	8002988 <TIM_OC4_SetConfig+0x78>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <TIM_OC4_SetConfig+0xc4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d007      	beq.n	8002988 <TIM_OC4_SetConfig+0x78>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a17      	ldr	r2, [pc, #92]	; (80029d8 <TIM_OC4_SetConfig+0xc8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d003      	beq.n	8002988 <TIM_OC4_SetConfig+0x78>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a16      	ldr	r2, [pc, #88]	; (80029dc <TIM_OC4_SetConfig+0xcc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d109      	bne.n	800299c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	4a15      	ldr	r2, [pc, #84]	; (80029e0 <TIM_OC4_SetConfig+0xd0>)
 800298c:	4013      	ands	r3, r2
 800298e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	019b      	lsls	r3, r3, #6
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4313      	orrs	r3, r2
 800299a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	621a      	str	r2, [r3, #32]
}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b006      	add	sp, #24
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	ffffefff 	.word	0xffffefff
 80029c4:	ffff8fff 	.word	0xffff8fff
 80029c8:	fffffcff 	.word	0xfffffcff
 80029cc:	ffffdfff 	.word	0xffffdfff
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40014000 	.word	0x40014000
 80029d8:	40014400 	.word	0x40014400
 80029dc:	40014800 	.word	0x40014800
 80029e0:	ffffbfff 	.word	0xffffbfff

080029e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a1b      	ldr	r3, [r3, #32]
 80029fa:	2201      	movs	r2, #1
 80029fc:	4393      	bics	r3, r2
 80029fe:	001a      	movs	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	22f0      	movs	r2, #240	; 0xf0
 8002a0e:	4393      	bics	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	220a      	movs	r2, #10
 8002a20:	4393      	bics	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	621a      	str	r2, [r3, #32]
}
 8002a38:	46c0      	nop			; (mov r8, r8)
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b006      	add	sp, #24
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	2210      	movs	r2, #16
 8002a52:	4393      	bics	r3, r2
 8002a54:	001a      	movs	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	4a0d      	ldr	r2, [pc, #52]	; (8002aa0 <TIM_TI2_ConfigInputStage+0x60>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	031b      	lsls	r3, r3, #12
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	22a0      	movs	r2, #160	; 0xa0
 8002a7c:	4393      	bics	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	621a      	str	r2, [r3, #32]
}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b006      	add	sp, #24
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	ffff0fff 	.word	0xffff0fff

08002aa4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2270      	movs	r2, #112	; 0x70
 8002ab8:	4393      	bics	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	609a      	str	r2, [r3, #8]
}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b004      	add	sp, #16
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	4a09      	ldr	r2, [pc, #36]	; (8002b14 <TIM_ETR_SetConfig+0x3c>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	021a      	lsls	r2, r3, #8
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	431a      	orrs	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	609a      	str	r2, [r3, #8]
}
 8002b0c:	46c0      	nop			; (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b006      	add	sp, #24
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	ffff00ff 	.word	0xffff00ff

08002b18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	221f      	movs	r2, #31
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	0013      	movs	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	43d2      	mvns	r2, r2
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a1a      	ldr	r2, [r3, #32]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	211f      	movs	r1, #31
 8002b48:	400b      	ands	r3, r1
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4099      	lsls	r1, r3
 8002b4e:	000b      	movs	r3, r1
 8002b50:	431a      	orrs	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	621a      	str	r2, [r3, #32]
}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b006      	add	sp, #24
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	223c      	movs	r2, #60	; 0x3c
 8002b6e:	5c9b      	ldrb	r3, [r3, r2]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e041      	b.n	8002bfc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	223c      	movs	r2, #60	; 0x3c
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	223d      	movs	r2, #61	; 0x3d
 8002b84:	2102      	movs	r1, #2
 8002b86:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2270      	movs	r2, #112	; 0x70
 8002b9c:	4393      	bics	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a13      	ldr	r2, [pc, #76]	; (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d009      	beq.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a11      	ldr	r2, [pc, #68]	; (8002c08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d004      	beq.n	8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d10c      	bne.n	8002bea <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2280      	movs	r2, #128	; 0x80
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	223d      	movs	r2, #61	; 0x3d
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	223c      	movs	r2, #60	; 0x3c
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b004      	add	sp, #16
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40012c00 	.word	0x40012c00
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	40014000 	.word	0x40014000

08002c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	223c      	movs	r2, #60	; 0x3c
 8002c22:	5c9b      	ldrb	r3, [r3, r2]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e03e      	b.n	8002caa <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	223c      	movs	r2, #60	; 0x3c
 8002c30:	2101      	movs	r1, #1
 8002c32:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	22ff      	movs	r2, #255	; 0xff
 8002c38:	4393      	bics	r3, r2
 8002c3a:	001a      	movs	r2, r3
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002c48:	401a      	ands	r2, r3
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002c56:	401a      	ands	r2, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002c64:	401a      	ands	r2, r3
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002c72:	401a      	ands	r2, r3
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4a11      	ldr	r2, [pc, #68]	; (8002cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002c80:	401a      	ands	r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002c8e:	401a      	ands	r2, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	223c      	movs	r2, #60	; 0x3c
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b004      	add	sp, #16
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	fffffcff 	.word	0xfffffcff
 8002cb8:	fffffbff 	.word	0xfffffbff
 8002cbc:	fffff7ff 	.word	0xfffff7ff
 8002cc0:	ffffefff 	.word	0xffffefff
 8002cc4:	ffffdfff 	.word	0xffffdfff
 8002cc8:	ffffbfff 	.word	0xffffbfff

08002ccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e044      	b.n	8002d68 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d107      	bne.n	8002cf6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2274      	movs	r2, #116	; 0x74
 8002cea:	2100      	movs	r1, #0
 8002cec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7fd fe37 	bl	8000964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2224      	movs	r2, #36	; 0x24
 8002cfa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2101      	movs	r1, #1
 8002d08:	438a      	bics	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f000 fb6e 	bl	80033f0 <UART_SetConfig>
 8002d14:	0003      	movs	r3, r0
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e024      	b.n	8002d68 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f000 fcb9 	bl	80036a0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	490d      	ldr	r1, [pc, #52]	; (8002d70 <HAL_UART_Init+0xa4>)
 8002d3a:	400a      	ands	r2, r1
 8002d3c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2108      	movs	r1, #8
 8002d4a:	438a      	bics	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2101      	movs	r1, #1
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	0018      	movs	r0, r3
 8002d62:	f000 fd51 	bl	8003808 <UART_CheckIdleState>
 8002d66:	0003      	movs	r3, r0
}
 8002d68:	0018      	movs	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	fffff7ff 	.word	0xfffff7ff

08002d74 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	1dbb      	adds	r3, r7, #6
 8002d80:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	d150      	bne.n	8002e2c <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_UART_Receive_IT+0x24>
 8002d90:	1dbb      	adds	r3, r7, #6
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e048      	b.n	8002e2e <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	015b      	lsls	r3, r3, #5
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d109      	bne.n	8002dbc <HAL_UART_Receive_IT+0x48>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d105      	bne.n	8002dbc <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2201      	movs	r2, #1
 8002db4:	4013      	ands	r3, r2
 8002db6:	d001      	beq.n	8002dbc <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e038      	b.n	8002e2e <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2274      	movs	r2, #116	; 0x74
 8002dc0:	5c9b      	ldrb	r3, [r3, r2]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_UART_Receive_IT+0x56>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e031      	b.n	8002e2e <HAL_UART_Receive_IT+0xba>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2274      	movs	r2, #116	; 0x74
 8002dce:	2101      	movs	r1, #1
 8002dd0:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	041b      	lsls	r3, r3, #16
 8002de2:	4013      	ands	r3, r2
 8002de4:	d019      	beq.n	8002e1a <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dea:	613b      	str	r3, [r7, #16]
  return(result);
 8002dec:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	2301      	movs	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f383 8810 	msr	PRIMASK, r3
}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2180      	movs	r1, #128	; 0x80
 8002e08:	04c9      	lsls	r1, r1, #19
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	f383 8810 	msr	PRIMASK, r3
}
 8002e18:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e1a:	1dbb      	adds	r3, r7, #6
 8002e1c:	881a      	ldrh	r2, [r3, #0]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 fdfc 	bl	8003a20 <UART_Start_Receive_IT>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	e000      	b.n	8002e2e <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002e2c:	2302      	movs	r3, #2
  }
}
 8002e2e:	0018      	movs	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b008      	add	sp, #32
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b0ab      	sub	sp, #172	; 0xac
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	22a4      	movs	r2, #164	; 0xa4
 8002e48:	18b9      	adds	r1, r7, r2
 8002e4a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	20a0      	movs	r0, #160	; 0xa0
 8002e54:	1839      	adds	r1, r7, r0
 8002e56:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	219c      	movs	r1, #156	; 0x9c
 8002e60:	1879      	adds	r1, r7, r1
 8002e62:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e64:	0011      	movs	r1, r2
 8002e66:	18bb      	adds	r3, r7, r2
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a99      	ldr	r2, [pc, #612]	; (80030d0 <HAL_UART_IRQHandler+0x298>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2298      	movs	r2, #152	; 0x98
 8002e70:	18bc      	adds	r4, r7, r2
 8002e72:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002e74:	18bb      	adds	r3, r7, r2
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d114      	bne.n	8002ea6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e7c:	187b      	adds	r3, r7, r1
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2220      	movs	r2, #32
 8002e82:	4013      	ands	r3, r2
 8002e84:	d00f      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e86:	183b      	adds	r3, r7, r0
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d100      	bne.n	8002e9a <HAL_UART_IRQHandler+0x62>
 8002e98:	e27e      	b.n	8003398 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	0010      	movs	r0, r2
 8002ea2:	4798      	blx	r3
      }
      return;
 8002ea4:	e278      	b.n	8003398 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ea6:	2398      	movs	r3, #152	; 0x98
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d100      	bne.n	8002eb2 <HAL_UART_IRQHandler+0x7a>
 8002eb0:	e114      	b.n	80030dc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002eb2:	239c      	movs	r3, #156	; 0x9c
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d106      	bne.n	8002ecc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ebe:	23a0      	movs	r3, #160	; 0xa0
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a83      	ldr	r2, [pc, #524]	; (80030d4 <HAL_UART_IRQHandler+0x29c>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d100      	bne.n	8002ecc <HAL_UART_IRQHandler+0x94>
 8002eca:	e107      	b.n	80030dc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ecc:	23a4      	movs	r3, #164	; 0xa4
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d012      	beq.n	8002efe <HAL_UART_IRQHandler+0xc6>
 8002ed8:	23a0      	movs	r3, #160	; 0xa0
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	2380      	movs	r3, #128	; 0x80
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d00b      	beq.n	8002efe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2201      	movs	r2, #1
 8002eec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	589b      	ldr	r3, [r3, r2]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002efe:	23a4      	movs	r3, #164	; 0xa4
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2202      	movs	r2, #2
 8002f06:	4013      	ands	r3, r2
 8002f08:	d011      	beq.n	8002f2e <HAL_UART_IRQHandler+0xf6>
 8002f0a:	239c      	movs	r3, #156	; 0x9c
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2201      	movs	r2, #1
 8002f12:	4013      	ands	r3, r2
 8002f14:	d00b      	beq.n	8002f2e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2280      	movs	r2, #128	; 0x80
 8002f22:	589b      	ldr	r3, [r3, r2]
 8002f24:	2204      	movs	r2, #4
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2180      	movs	r1, #128	; 0x80
 8002f2c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f2e:	23a4      	movs	r3, #164	; 0xa4
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2204      	movs	r2, #4
 8002f36:	4013      	ands	r3, r2
 8002f38:	d011      	beq.n	8002f5e <HAL_UART_IRQHandler+0x126>
 8002f3a:	239c      	movs	r3, #156	; 0x9c
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2201      	movs	r2, #1
 8002f42:	4013      	ands	r3, r2
 8002f44:	d00b      	beq.n	8002f5e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2280      	movs	r2, #128	; 0x80
 8002f52:	589b      	ldr	r3, [r3, r2]
 8002f54:	2202      	movs	r2, #2
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2180      	movs	r1, #128	; 0x80
 8002f5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f5e:	23a4      	movs	r3, #164	; 0xa4
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2208      	movs	r2, #8
 8002f66:	4013      	ands	r3, r2
 8002f68:	d017      	beq.n	8002f9a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f6a:	23a0      	movs	r3, #160	; 0xa0
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2220      	movs	r2, #32
 8002f72:	4013      	ands	r3, r2
 8002f74:	d105      	bne.n	8002f82 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f76:	239c      	movs	r3, #156	; 0x9c
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f80:	d00b      	beq.n	8002f9a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2208      	movs	r2, #8
 8002f88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2280      	movs	r2, #128	; 0x80
 8002f8e:	589b      	ldr	r3, [r3, r2]
 8002f90:	2208      	movs	r2, #8
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2180      	movs	r1, #128	; 0x80
 8002f98:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f9a:	23a4      	movs	r3, #164	; 0xa4
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d013      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x198>
 8002fa8:	23a0      	movs	r3, #160	; 0xa0
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	04db      	lsls	r3, r3, #19
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2280      	movs	r2, #128	; 0x80
 8002fbc:	0112      	lsls	r2, r2, #4
 8002fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	589b      	ldr	r3, [r3, r2]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2180      	movs	r1, #128	; 0x80
 8002fce:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2280      	movs	r2, #128	; 0x80
 8002fd4:	589b      	ldr	r3, [r3, r2]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d100      	bne.n	8002fdc <HAL_UART_IRQHandler+0x1a4>
 8002fda:	e1df      	b.n	800339c <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fdc:	23a4      	movs	r3, #164	; 0xa4
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d00e      	beq.n	8003006 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fe8:	23a0      	movs	r3, #160	; 0xa0
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	d008      	beq.n	8003006 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d004      	beq.n	8003006 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	0010      	movs	r0, r2
 8003004:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	589b      	ldr	r3, [r3, r2]
 800300c:	2194      	movs	r1, #148	; 0x94
 800300e:	187a      	adds	r2, r7, r1
 8003010:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2240      	movs	r2, #64	; 0x40
 800301a:	4013      	ands	r3, r2
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d004      	beq.n	800302a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003020:	187b      	adds	r3, r7, r1
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2228      	movs	r2, #40	; 0x28
 8003026:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003028:	d047      	beq.n	80030ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	0018      	movs	r0, r3
 800302e:	f000 fda7 	bl	8003b80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2240      	movs	r2, #64	; 0x40
 800303a:	4013      	ands	r3, r2
 800303c:	2b40      	cmp	r3, #64	; 0x40
 800303e:	d137      	bne.n	80030b0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003040:	f3ef 8310 	mrs	r3, PRIMASK
 8003044:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003048:	2090      	movs	r0, #144	; 0x90
 800304a:	183a      	adds	r2, r7, r0
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	2301      	movs	r3, #1
 8003050:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003054:	f383 8810 	msr	PRIMASK, r3
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2140      	movs	r1, #64	; 0x40
 8003066:	438a      	bics	r2, r1
 8003068:	609a      	str	r2, [r3, #8]
 800306a:	183b      	adds	r3, r7, r0
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003072:	f383 8810 	msr	PRIMASK, r3
}
 8003076:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	2b00      	cmp	r3, #0
 800307e:	d012      	beq.n	80030a6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	4a14      	ldr	r2, [pc, #80]	; (80030d8 <HAL_UART_IRQHandler+0x2a0>)
 8003086:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	0018      	movs	r0, r3
 800308e:	f7fe f8fd 	bl	800128c <HAL_DMA_Abort_IT>
 8003092:	1e03      	subs	r3, r0, #0
 8003094:	d01a      	beq.n	80030cc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	0018      	movs	r0, r3
 80030a2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a4:	e012      	b.n	80030cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	0018      	movs	r0, r3
 80030aa:	f000 f98d 	bl	80033c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ae:	e00d      	b.n	80030cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 f988 	bl	80033c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b8:	e008      	b.n	80030cc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 f983 	bl	80033c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2280      	movs	r2, #128	; 0x80
 80030c6:	2100      	movs	r1, #0
 80030c8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80030ca:	e167      	b.n	800339c <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030cc:	46c0      	nop			; (mov r8, r8)
    return;
 80030ce:	e165      	b.n	800339c <HAL_UART_IRQHandler+0x564>
 80030d0:	0000080f 	.word	0x0000080f
 80030d4:	04000120 	.word	0x04000120
 80030d8:	08003c45 	.word	0x08003c45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d000      	beq.n	80030e6 <HAL_UART_IRQHandler+0x2ae>
 80030e4:	e131      	b.n	800334a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030e6:	23a4      	movs	r3, #164	; 0xa4
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2210      	movs	r2, #16
 80030ee:	4013      	ands	r3, r2
 80030f0:	d100      	bne.n	80030f4 <HAL_UART_IRQHandler+0x2bc>
 80030f2:	e12a      	b.n	800334a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030f4:	23a0      	movs	r3, #160	; 0xa0
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2210      	movs	r2, #16
 80030fc:	4013      	ands	r3, r2
 80030fe:	d100      	bne.n	8003102 <HAL_UART_IRQHandler+0x2ca>
 8003100:	e123      	b.n	800334a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2210      	movs	r2, #16
 8003108:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2240      	movs	r2, #64	; 0x40
 8003112:	4013      	ands	r3, r2
 8003114:	2b40      	cmp	r3, #64	; 0x40
 8003116:	d000      	beq.n	800311a <HAL_UART_IRQHandler+0x2e2>
 8003118:	e09b      	b.n	8003252 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	217e      	movs	r1, #126	; 0x7e
 8003124:	187b      	adds	r3, r7, r1
 8003126:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003128:	187b      	adds	r3, r7, r1
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d100      	bne.n	8003132 <HAL_UART_IRQHandler+0x2fa>
 8003130:	e136      	b.n	80033a0 <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2258      	movs	r2, #88	; 0x58
 8003136:	5a9b      	ldrh	r3, [r3, r2]
 8003138:	187a      	adds	r2, r7, r1
 800313a:	8812      	ldrh	r2, [r2, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d300      	bcc.n	8003142 <HAL_UART_IRQHandler+0x30a>
 8003140:	e12e      	b.n	80033a0 <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	187a      	adds	r2, r7, r1
 8003146:	215a      	movs	r1, #90	; 0x5a
 8003148:	8812      	ldrh	r2, [r2, #0]
 800314a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b20      	cmp	r3, #32
 8003154:	d06e      	beq.n	8003234 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003156:	f3ef 8310 	mrs	r3, PRIMASK
 800315a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800315e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003160:	2301      	movs	r3, #1
 8003162:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003166:	f383 8810 	msr	PRIMASK, r3
}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	498e      	ldr	r1, [pc, #568]	; (80033b0 <HAL_UART_IRQHandler+0x578>)
 8003178:	400a      	ands	r2, r1
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800317e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003182:	f383 8810 	msr	PRIMASK, r3
}
 8003186:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003188:	f3ef 8310 	mrs	r3, PRIMASK
 800318c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800318e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003190:	677b      	str	r3, [r7, #116]	; 0x74
 8003192:	2301      	movs	r3, #1
 8003194:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003198:	f383 8810 	msr	PRIMASK, r3
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2101      	movs	r1, #1
 80031aa:	438a      	bics	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]
 80031ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031b0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b4:	f383 8810 	msr	PRIMASK, r3
}
 80031b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ba:	f3ef 8310 	mrs	r3, PRIMASK
 80031be:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80031c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031c2:	673b      	str	r3, [r7, #112]	; 0x70
 80031c4:	2301      	movs	r3, #1
 80031c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ca:	f383 8810 	msr	PRIMASK, r3
}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2140      	movs	r1, #64	; 0x40
 80031dc:	438a      	bics	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031e2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031e6:	f383 8810 	msr	PRIMASK, r3
}
 80031ea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031f8:	f3ef 8310 	mrs	r3, PRIMASK
 80031fc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80031fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003200:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003202:	2301      	movs	r3, #1
 8003204:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003208:	f383 8810 	msr	PRIMASK, r3
}
 800320c:	46c0      	nop			; (mov r8, r8)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2110      	movs	r1, #16
 800321a:	438a      	bics	r2, r1
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003220:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003224:	f383 8810 	msr	PRIMASK, r3
}
 8003228:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	0018      	movs	r0, r3
 8003230:	f7fd fff4 	bl	800121c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2258      	movs	r2, #88	; 0x58
 8003238:	5a9a      	ldrh	r2, [r3, r2]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	215a      	movs	r1, #90	; 0x5a
 800323e:	5a5b      	ldrh	r3, [r3, r1]
 8003240:	b29b      	uxth	r3, r3
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	b29a      	uxth	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	0011      	movs	r1, r2
 800324a:	0018      	movs	r0, r3
 800324c:	f000 f8c4 	bl	80033d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003250:	e0a6      	b.n	80033a0 <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2258      	movs	r2, #88	; 0x58
 8003256:	5a99      	ldrh	r1, [r3, r2]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	225a      	movs	r2, #90	; 0x5a
 800325c:	5a9b      	ldrh	r3, [r3, r2]
 800325e:	b29a      	uxth	r2, r3
 8003260:	208e      	movs	r0, #142	; 0x8e
 8003262:	183b      	adds	r3, r7, r0
 8003264:	1a8a      	subs	r2, r1, r2
 8003266:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	225a      	movs	r2, #90	; 0x5a
 800326c:	5a9b      	ldrh	r3, [r3, r2]
 800326e:	b29b      	uxth	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d100      	bne.n	8003276 <HAL_UART_IRQHandler+0x43e>
 8003274:	e096      	b.n	80033a4 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8003276:	183b      	adds	r3, r7, r0
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d100      	bne.n	8003280 <HAL_UART_IRQHandler+0x448>
 800327e:	e091      	b.n	80033a4 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003280:	f3ef 8310 	mrs	r3, PRIMASK
 8003284:	60fb      	str	r3, [r7, #12]
  return(result);
 8003286:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003288:	2488      	movs	r4, #136	; 0x88
 800328a:	193a      	adds	r2, r7, r4
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	2301      	movs	r3, #1
 8003290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f383 8810 	msr	PRIMASK, r3
}
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4943      	ldr	r1, [pc, #268]	; (80033b4 <HAL_UART_IRQHandler+0x57c>)
 80032a6:	400a      	ands	r2, r1
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	193b      	adds	r3, r7, r4
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f383 8810 	msr	PRIMASK, r3
}
 80032b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b8:	f3ef 8310 	mrs	r3, PRIMASK
 80032bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80032be:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c0:	2484      	movs	r4, #132	; 0x84
 80032c2:	193a      	adds	r2, r7, r4
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	2301      	movs	r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f383 8810 	msr	PRIMASK, r3
}
 80032d0:	46c0      	nop			; (mov r8, r8)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2101      	movs	r1, #1
 80032de:	438a      	bics	r2, r1
 80032e0:	609a      	str	r2, [r3, #8]
 80032e2:	193b      	adds	r3, r7, r4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	f383 8810 	msr	PRIMASK, r3
}
 80032ee:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003302:	f3ef 8310 	mrs	r3, PRIMASK
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800330a:	2480      	movs	r4, #128	; 0x80
 800330c:	193a      	adds	r2, r7, r4
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	2301      	movs	r3, #1
 8003312:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	f383 8810 	msr	PRIMASK, r3
}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2110      	movs	r1, #16
 8003328:	438a      	bics	r2, r1
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	193b      	adds	r3, r7, r4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003334:	f383 8810 	msr	PRIMASK, r3
}
 8003338:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800333a:	183b      	adds	r3, r7, r0
 800333c:	881a      	ldrh	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	0011      	movs	r1, r2
 8003342:	0018      	movs	r0, r3
 8003344:	f000 f848 	bl	80033d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003348:	e02c      	b.n	80033a4 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800334a:	23a4      	movs	r3, #164	; 0xa4
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2280      	movs	r2, #128	; 0x80
 8003352:	4013      	ands	r3, r2
 8003354:	d00f      	beq.n	8003376 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003356:	23a0      	movs	r3, #160	; 0xa0
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2280      	movs	r2, #128	; 0x80
 800335e:	4013      	ands	r3, r2
 8003360:	d009      	beq.n	8003376 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01e      	beq.n	80033a8 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	0010      	movs	r0, r2
 8003372:	4798      	blx	r3
    }
    return;
 8003374:	e018      	b.n	80033a8 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003376:	23a4      	movs	r3, #164	; 0xa4
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2240      	movs	r2, #64	; 0x40
 800337e:	4013      	ands	r3, r2
 8003380:	d013      	beq.n	80033aa <HAL_UART_IRQHandler+0x572>
 8003382:	23a0      	movs	r3, #160	; 0xa0
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2240      	movs	r2, #64	; 0x40
 800338a:	4013      	ands	r3, r2
 800338c:	d00d      	beq.n	80033aa <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	0018      	movs	r0, r3
 8003392:	f000 fc6e 	bl	8003c72 <UART_EndTransmit_IT>
    return;
 8003396:	e008      	b.n	80033aa <HAL_UART_IRQHandler+0x572>
      return;
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	e006      	b.n	80033aa <HAL_UART_IRQHandler+0x572>
    return;
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	e004      	b.n	80033aa <HAL_UART_IRQHandler+0x572>
      return;
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	e002      	b.n	80033aa <HAL_UART_IRQHandler+0x572>
      return;
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	e000      	b.n	80033aa <HAL_UART_IRQHandler+0x572>
    return;
 80033a8:	46c0      	nop			; (mov r8, r8)
  }

}
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b02b      	add	sp, #172	; 0xac
 80033ae:	bd90      	pop	{r4, r7, pc}
 80033b0:	fffffeff 	.word	0xfffffeff
 80033b4:	fffffedf 	.word	0xfffffedf

080033b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80033c0:	46c0      	nop			; (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b002      	add	sp, #8
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	000a      	movs	r2, r1
 80033e2:	1cbb      	adds	r3, r7, #2
 80033e4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b002      	add	sp, #8
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033f8:	231e      	movs	r3, #30
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a97      	ldr	r2, [pc, #604]	; (800367c <UART_SetConfig+0x28c>)
 8003420:	4013      	ands	r3, r2
 8003422:	0019      	movs	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	430a      	orrs	r2, r1
 800342c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a92      	ldr	r2, [pc, #584]	; (8003680 <UART_SetConfig+0x290>)
 8003436:	4013      	ands	r3, r2
 8003438:	0019      	movs	r1, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4a89      	ldr	r2, [pc, #548]	; (8003684 <UART_SetConfig+0x294>)
 800345e:	4013      	ands	r3, r2
 8003460:	0019      	movs	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	430a      	orrs	r2, r1
 800346a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a85      	ldr	r2, [pc, #532]	; (8003688 <UART_SetConfig+0x298>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d127      	bne.n	80034c6 <UART_SetConfig+0xd6>
 8003476:	4b85      	ldr	r3, [pc, #532]	; (800368c <UART_SetConfig+0x29c>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	2203      	movs	r2, #3
 800347c:	4013      	ands	r3, r2
 800347e:	2b03      	cmp	r3, #3
 8003480:	d00d      	beq.n	800349e <UART_SetConfig+0xae>
 8003482:	d81b      	bhi.n	80034bc <UART_SetConfig+0xcc>
 8003484:	2b02      	cmp	r3, #2
 8003486:	d014      	beq.n	80034b2 <UART_SetConfig+0xc2>
 8003488:	d818      	bhi.n	80034bc <UART_SetConfig+0xcc>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <UART_SetConfig+0xa4>
 800348e:	2b01      	cmp	r3, #1
 8003490:	d00a      	beq.n	80034a8 <UART_SetConfig+0xb8>
 8003492:	e013      	b.n	80034bc <UART_SetConfig+0xcc>
 8003494:	231f      	movs	r3, #31
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	e035      	b.n	800350a <UART_SetConfig+0x11a>
 800349e:	231f      	movs	r3, #31
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	2202      	movs	r2, #2
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e030      	b.n	800350a <UART_SetConfig+0x11a>
 80034a8:	231f      	movs	r3, #31
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	2204      	movs	r2, #4
 80034ae:	701a      	strb	r2, [r3, #0]
 80034b0:	e02b      	b.n	800350a <UART_SetConfig+0x11a>
 80034b2:	231f      	movs	r3, #31
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	2208      	movs	r2, #8
 80034b8:	701a      	strb	r2, [r3, #0]
 80034ba:	e026      	b.n	800350a <UART_SetConfig+0x11a>
 80034bc:	231f      	movs	r3, #31
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	2210      	movs	r2, #16
 80034c2:	701a      	strb	r2, [r3, #0]
 80034c4:	e021      	b.n	800350a <UART_SetConfig+0x11a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a71      	ldr	r2, [pc, #452]	; (8003690 <UART_SetConfig+0x2a0>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d104      	bne.n	80034da <UART_SetConfig+0xea>
 80034d0:	231f      	movs	r3, #31
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]
 80034d8:	e017      	b.n	800350a <UART_SetConfig+0x11a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a6d      	ldr	r2, [pc, #436]	; (8003694 <UART_SetConfig+0x2a4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d104      	bne.n	80034ee <UART_SetConfig+0xfe>
 80034e4:	231f      	movs	r3, #31
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
 80034ec:	e00d      	b.n	800350a <UART_SetConfig+0x11a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a69      	ldr	r2, [pc, #420]	; (8003698 <UART_SetConfig+0x2a8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d104      	bne.n	8003502 <UART_SetConfig+0x112>
 80034f8:	231f      	movs	r3, #31
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e003      	b.n	800350a <UART_SetConfig+0x11a>
 8003502:	231f      	movs	r3, #31
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	2210      	movs	r2, #16
 8003508:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69da      	ldr	r2, [r3, #28]
 800350e:	2380      	movs	r3, #128	; 0x80
 8003510:	021b      	lsls	r3, r3, #8
 8003512:	429a      	cmp	r2, r3
 8003514:	d15d      	bne.n	80035d2 <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8003516:	231f      	movs	r3, #31
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b08      	cmp	r3, #8
 800351e:	d015      	beq.n	800354c <UART_SetConfig+0x15c>
 8003520:	dc18      	bgt.n	8003554 <UART_SetConfig+0x164>
 8003522:	2b04      	cmp	r3, #4
 8003524:	d00d      	beq.n	8003542 <UART_SetConfig+0x152>
 8003526:	dc15      	bgt.n	8003554 <UART_SetConfig+0x164>
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <UART_SetConfig+0x142>
 800352c:	2b02      	cmp	r3, #2
 800352e:	d005      	beq.n	800353c <UART_SetConfig+0x14c>
 8003530:	e010      	b.n	8003554 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003532:	f7fe fcdb 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8003536:	0003      	movs	r3, r0
 8003538:	61bb      	str	r3, [r7, #24]
        break;
 800353a:	e012      	b.n	8003562 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800353c:	4b57      	ldr	r3, [pc, #348]	; (800369c <UART_SetConfig+0x2ac>)
 800353e:	61bb      	str	r3, [r7, #24]
        break;
 8003540:	e00f      	b.n	8003562 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003542:	f7fe fc63 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8003546:	0003      	movs	r3, r0
 8003548:	61bb      	str	r3, [r7, #24]
        break;
 800354a:	e00a      	b.n	8003562 <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	61bb      	str	r3, [r7, #24]
        break;
 8003552:	e006      	b.n	8003562 <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003558:	231e      	movs	r3, #30
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	2201      	movs	r2, #1
 800355e:	701a      	strb	r2, [r3, #0]
        break;
 8003560:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d100      	bne.n	800356a <UART_SetConfig+0x17a>
 8003568:	e07b      	b.n	8003662 <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	005a      	lsls	r2, r3, #1
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	18d2      	adds	r2, r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	0019      	movs	r1, r3
 800357c:	0010      	movs	r0, r2
 800357e:	f7fc fdc3 	bl	8000108 <__udivsi3>
 8003582:	0003      	movs	r3, r0
 8003584:	b29b      	uxth	r3, r3
 8003586:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2b0f      	cmp	r3, #15
 800358c:	d91c      	bls.n	80035c8 <UART_SetConfig+0x1d8>
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	025b      	lsls	r3, r3, #9
 8003594:	429a      	cmp	r2, r3
 8003596:	d217      	bcs.n	80035c8 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	b29a      	uxth	r2, r3
 800359c:	200e      	movs	r0, #14
 800359e:	183b      	adds	r3, r7, r0
 80035a0:	210f      	movs	r1, #15
 80035a2:	438a      	bics	r2, r1
 80035a4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	2207      	movs	r2, #7
 80035ae:	4013      	ands	r3, r2
 80035b0:	b299      	uxth	r1, r3
 80035b2:	183b      	adds	r3, r7, r0
 80035b4:	183a      	adds	r2, r7, r0
 80035b6:	8812      	ldrh	r2, [r2, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	183a      	adds	r2, r7, r0
 80035c2:	8812      	ldrh	r2, [r2, #0]
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	e04c      	b.n	8003662 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80035c8:	231e      	movs	r3, #30
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	e047      	b.n	8003662 <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035d2:	231f      	movs	r3, #31
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d015      	beq.n	8003608 <UART_SetConfig+0x218>
 80035dc:	dc18      	bgt.n	8003610 <UART_SetConfig+0x220>
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d00d      	beq.n	80035fe <UART_SetConfig+0x20e>
 80035e2:	dc15      	bgt.n	8003610 <UART_SetConfig+0x220>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <UART_SetConfig+0x1fe>
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d005      	beq.n	80035f8 <UART_SetConfig+0x208>
 80035ec:	e010      	b.n	8003610 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ee:	f7fe fc7d 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 80035f2:	0003      	movs	r3, r0
 80035f4:	61bb      	str	r3, [r7, #24]
        break;
 80035f6:	e012      	b.n	800361e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f8:	4b28      	ldr	r3, [pc, #160]	; (800369c <UART_SetConfig+0x2ac>)
 80035fa:	61bb      	str	r3, [r7, #24]
        break;
 80035fc:	e00f      	b.n	800361e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fe:	f7fe fc05 	bl	8001e0c <HAL_RCC_GetSysClockFreq>
 8003602:	0003      	movs	r3, r0
 8003604:	61bb      	str	r3, [r7, #24]
        break;
 8003606:	e00a      	b.n	800361e <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	61bb      	str	r3, [r7, #24]
        break;
 800360e:	e006      	b.n	800361e <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003614:	231e      	movs	r3, #30
 8003616:	18fb      	adds	r3, r7, r3
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]
        break;
 800361c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01e      	beq.n	8003662 <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	085a      	lsrs	r2, r3, #1
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	18d2      	adds	r2, r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	0019      	movs	r1, r3
 8003634:	0010      	movs	r0, r2
 8003636:	f7fc fd67 	bl	8000108 <__udivsi3>
 800363a:	0003      	movs	r3, r0
 800363c:	b29b      	uxth	r3, r3
 800363e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b0f      	cmp	r3, #15
 8003644:	d909      	bls.n	800365a <UART_SetConfig+0x26a>
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	025b      	lsls	r3, r3, #9
 800364c:	429a      	cmp	r2, r3
 800364e:	d204      	bcs.n	800365a <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	60da      	str	r2, [r3, #12]
 8003658:	e003      	b.n	8003662 <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 800365a:	231e      	movs	r3, #30
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2201      	movs	r2, #1
 8003660:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800366e:	231e      	movs	r3, #30
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	781b      	ldrb	r3, [r3, #0]
}
 8003674:	0018      	movs	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	b008      	add	sp, #32
 800367a:	bd80      	pop	{r7, pc}
 800367c:	efff69f3 	.word	0xefff69f3
 8003680:	ffffcfff 	.word	0xffffcfff
 8003684:	fffff4ff 	.word	0xfffff4ff
 8003688:	40013800 	.word	0x40013800
 800368c:	40021000 	.word	0x40021000
 8003690:	40004400 	.word	0x40004400
 8003694:	40004800 	.word	0x40004800
 8003698:	40004c00 	.word	0x40004c00
 800369c:	007a1200 	.word	0x007a1200

080036a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	2201      	movs	r2, #1
 80036ae:	4013      	ands	r3, r2
 80036b0:	d00b      	beq.n	80036ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4a4a      	ldr	r2, [pc, #296]	; (80037e4 <UART_AdvFeatureConfig+0x144>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	0019      	movs	r1, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	2202      	movs	r2, #2
 80036d0:	4013      	ands	r3, r2
 80036d2:	d00b      	beq.n	80036ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4a43      	ldr	r2, [pc, #268]	; (80037e8 <UART_AdvFeatureConfig+0x148>)
 80036dc:	4013      	ands	r3, r2
 80036de:	0019      	movs	r1, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	2204      	movs	r2, #4
 80036f2:	4013      	ands	r3, r2
 80036f4:	d00b      	beq.n	800370e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a3b      	ldr	r2, [pc, #236]	; (80037ec <UART_AdvFeatureConfig+0x14c>)
 80036fe:	4013      	ands	r3, r2
 8003700:	0019      	movs	r1, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	2208      	movs	r2, #8
 8003714:	4013      	ands	r3, r2
 8003716:	d00b      	beq.n	8003730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4a34      	ldr	r2, [pc, #208]	; (80037f0 <UART_AdvFeatureConfig+0x150>)
 8003720:	4013      	ands	r3, r2
 8003722:	0019      	movs	r1, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	2210      	movs	r2, #16
 8003736:	4013      	ands	r3, r2
 8003738:	d00b      	beq.n	8003752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a2c      	ldr	r2, [pc, #176]	; (80037f4 <UART_AdvFeatureConfig+0x154>)
 8003742:	4013      	ands	r3, r2
 8003744:	0019      	movs	r1, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	2220      	movs	r2, #32
 8003758:	4013      	ands	r3, r2
 800375a:	d00b      	beq.n	8003774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	4a25      	ldr	r2, [pc, #148]	; (80037f8 <UART_AdvFeatureConfig+0x158>)
 8003764:	4013      	ands	r3, r2
 8003766:	0019      	movs	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	2240      	movs	r2, #64	; 0x40
 800377a:	4013      	ands	r3, r2
 800377c:	d01d      	beq.n	80037ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4a1d      	ldr	r2, [pc, #116]	; (80037fc <UART_AdvFeatureConfig+0x15c>)
 8003786:	4013      	ands	r3, r2
 8003788:	0019      	movs	r1, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800379a:	2380      	movs	r3, #128	; 0x80
 800379c:	035b      	lsls	r3, r3, #13
 800379e:	429a      	cmp	r2, r3
 80037a0:	d10b      	bne.n	80037ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a15      	ldr	r2, [pc, #84]	; (8003800 <UART_AdvFeatureConfig+0x160>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	0019      	movs	r1, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2280      	movs	r2, #128	; 0x80
 80037c0:	4013      	ands	r3, r2
 80037c2:	d00b      	beq.n	80037dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4a0e      	ldr	r2, [pc, #56]	; (8003804 <UART_AdvFeatureConfig+0x164>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	0019      	movs	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	605a      	str	r2, [r3, #4]
  }
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	fffdffff 	.word	0xfffdffff
 80037e8:	fffeffff 	.word	0xfffeffff
 80037ec:	fffbffff 	.word	0xfffbffff
 80037f0:	ffff7fff 	.word	0xffff7fff
 80037f4:	ffffefff 	.word	0xffffefff
 80037f8:	ffffdfff 	.word	0xffffdfff
 80037fc:	ffefffff 	.word	0xffefffff
 8003800:	ff9fffff 	.word	0xff9fffff
 8003804:	fff7ffff 	.word	0xfff7ffff

08003808 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af02      	add	r7, sp, #8
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2280      	movs	r2, #128	; 0x80
 8003814:	2100      	movs	r1, #0
 8003816:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003818:	f7fd f9e2 	bl	8000be0 <HAL_GetTick>
 800381c:	0003      	movs	r3, r0
 800381e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2208      	movs	r2, #8
 8003828:	4013      	ands	r3, r2
 800382a:	2b08      	cmp	r3, #8
 800382c:	d10c      	bne.n	8003848 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2280      	movs	r2, #128	; 0x80
 8003832:	0391      	lsls	r1, r2, #14
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4a17      	ldr	r2, [pc, #92]	; (8003894 <UART_CheckIdleState+0x8c>)
 8003838:	9200      	str	r2, [sp, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	f000 f82c 	bl	8003898 <UART_WaitOnFlagUntilTimeout>
 8003840:	1e03      	subs	r3, r0, #0
 8003842:	d001      	beq.n	8003848 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e021      	b.n	800388c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2204      	movs	r2, #4
 8003850:	4013      	ands	r3, r2
 8003852:	2b04      	cmp	r3, #4
 8003854:	d10c      	bne.n	8003870 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2280      	movs	r2, #128	; 0x80
 800385a:	03d1      	lsls	r1, r2, #15
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4a0d      	ldr	r2, [pc, #52]	; (8003894 <UART_CheckIdleState+0x8c>)
 8003860:	9200      	str	r2, [sp, #0]
 8003862:	2200      	movs	r2, #0
 8003864:	f000 f818 	bl	8003898 <UART_WaitOnFlagUntilTimeout>
 8003868:	1e03      	subs	r3, r0, #0
 800386a:	d001      	beq.n	8003870 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e00d      	b.n	800388c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2274      	movs	r2, #116	; 0x74
 8003886:	2100      	movs	r1, #0
 8003888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	0018      	movs	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	b004      	add	sp, #16
 8003892:	bd80      	pop	{r7, pc}
 8003894:	01ffffff 	.word	0x01ffffff

08003898 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b094      	sub	sp, #80	; 0x50
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	1dfb      	adds	r3, r7, #7
 80038a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a8:	e0a3      	b.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038ac:	3301      	adds	r3, #1
 80038ae:	d100      	bne.n	80038b2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80038b0:	e09f      	b.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b2:	f7fd f995 	bl	8000be0 <HAL_GetTick>
 80038b6:	0002      	movs	r2, r0
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038be:	429a      	cmp	r2, r3
 80038c0:	d302      	bcc.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d13d      	bne.n	8003944 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c8:	f3ef 8310 	mrs	r3, PRIMASK
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038d0:	647b      	str	r3, [r7, #68]	; 0x44
 80038d2:	2301      	movs	r3, #1
 80038d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d8:	f383 8810 	msr	PRIMASK, r3
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	494c      	ldr	r1, [pc, #304]	; (8003a1c <UART_WaitOnFlagUntilTimeout+0x184>)
 80038ea:	400a      	ands	r2, r1
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f4:	f383 8810 	msr	PRIMASK, r3
}
 80038f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fa:	f3ef 8310 	mrs	r3, PRIMASK
 80038fe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003902:	643b      	str	r3, [r7, #64]	; 0x40
 8003904:	2301      	movs	r3, #1
 8003906:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2101      	movs	r1, #1
 800391c:	438a      	bics	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003922:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003926:	f383 8810 	msr	PRIMASK, r3
}
 800392a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2274      	movs	r2, #116	; 0x74
 800393c:	2100      	movs	r1, #0
 800393e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e067      	b.n	8003a14 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2204      	movs	r2, #4
 800394c:	4013      	ands	r3, r2
 800394e:	d050      	beq.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	2380      	movs	r3, #128	; 0x80
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	401a      	ands	r2, r3
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	429a      	cmp	r2, r3
 8003962:	d146      	bne.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2280      	movs	r2, #128	; 0x80
 800396a:	0112      	lsls	r2, r2, #4
 800396c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800396e:	f3ef 8310 	mrs	r3, PRIMASK
 8003972:	613b      	str	r3, [r7, #16]
  return(result);
 8003974:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003978:	2301      	movs	r3, #1
 800397a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f383 8810 	msr	PRIMASK, r3
}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4923      	ldr	r1, [pc, #140]	; (8003a1c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003990:	400a      	ands	r2, r1
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003996:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f383 8810 	msr	PRIMASK, r3
}
 800399e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a0:	f3ef 8310 	mrs	r3, PRIMASK
 80039a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80039a6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80039aa:	2301      	movs	r3, #1
 80039ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	f383 8810 	msr	PRIMASK, r3
}
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2101      	movs	r1, #1
 80039c2:	438a      	bics	r2, r1
 80039c4:	609a      	str	r2, [r3, #8]
 80039c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	f383 8810 	msr	PRIMASK, r3
}
 80039d0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	2120      	movs	r1, #32
 80039e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2274      	movs	r2, #116	; 0x74
 80039ea:	2100      	movs	r1, #0
 80039ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e010      	b.n	8003a14 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	4013      	ands	r3, r2
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	425a      	negs	r2, r3
 8003a02:	4153      	adcs	r3, r2
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	001a      	movs	r2, r3
 8003a08:	1dfb      	adds	r3, r7, #7
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d100      	bne.n	8003a12 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003a10:	e74b      	b.n	80038aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b014      	add	sp, #80	; 0x50
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	fffffe5f 	.word	0xfffffe5f

08003a20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08c      	sub	sp, #48	; 0x30
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	1dbb      	adds	r3, r7, #6
 8003a2c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	68ba      	ldr	r2, [r7, #8]
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1dba      	adds	r2, r7, #6
 8003a38:	2158      	movs	r1, #88	; 0x58
 8003a3a:	8812      	ldrh	r2, [r2, #0]
 8003a3c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1dba      	adds	r2, r7, #6
 8003a42:	215a      	movs	r1, #90	; 0x5a
 8003a44:	8812      	ldrh	r2, [r2, #0]
 8003a46:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	015b      	lsls	r3, r3, #5
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d10d      	bne.n	8003a76 <UART_Start_Receive_IT+0x56>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <UART_Start_Receive_IT+0x4c>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	225c      	movs	r2, #92	; 0x5c
 8003a66:	4943      	ldr	r1, [pc, #268]	; (8003b74 <UART_Start_Receive_IT+0x154>)
 8003a68:	5299      	strh	r1, [r3, r2]
 8003a6a:	e02e      	b.n	8003aca <UART_Start_Receive_IT+0xaa>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	225c      	movs	r2, #92	; 0x5c
 8003a70:	21ff      	movs	r1, #255	; 0xff
 8003a72:	5299      	strh	r1, [r3, r2]
 8003a74:	e029      	b.n	8003aca <UART_Start_Receive_IT+0xaa>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10d      	bne.n	8003a9a <UART_Start_Receive_IT+0x7a>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d104      	bne.n	8003a90 <UART_Start_Receive_IT+0x70>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	225c      	movs	r2, #92	; 0x5c
 8003a8a:	21ff      	movs	r1, #255	; 0xff
 8003a8c:	5299      	strh	r1, [r3, r2]
 8003a8e:	e01c      	b.n	8003aca <UART_Start_Receive_IT+0xaa>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	225c      	movs	r2, #92	; 0x5c
 8003a94:	217f      	movs	r1, #127	; 0x7f
 8003a96:	5299      	strh	r1, [r3, r2]
 8003a98:	e017      	b.n	8003aca <UART_Start_Receive_IT+0xaa>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	2380      	movs	r3, #128	; 0x80
 8003aa0:	055b      	lsls	r3, r3, #21
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d10d      	bne.n	8003ac2 <UART_Start_Receive_IT+0xa2>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d104      	bne.n	8003ab8 <UART_Start_Receive_IT+0x98>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	225c      	movs	r2, #92	; 0x5c
 8003ab2:	217f      	movs	r1, #127	; 0x7f
 8003ab4:	5299      	strh	r1, [r3, r2]
 8003ab6:	e008      	b.n	8003aca <UART_Start_Receive_IT+0xaa>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	225c      	movs	r2, #92	; 0x5c
 8003abc:	213f      	movs	r1, #63	; 0x3f
 8003abe:	5299      	strh	r1, [r3, r2]
 8003ac0:	e003      	b.n	8003aca <UART_Start_Receive_IT+0xaa>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	225c      	movs	r2, #92	; 0x5c
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2280      	movs	r2, #128	; 0x80
 8003ace:	2100      	movs	r1, #0
 8003ad0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2222      	movs	r2, #34	; 0x22
 8003ad6:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8003adc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ade:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	f383 8810 	msr	PRIMASK, r3
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2101      	movs	r1, #1
 8003afa:	430a      	orrs	r2, r1
 8003afc:	609a      	str	r2, [r3, #8]
 8003afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	f383 8810 	msr	PRIMASK, r3
}
 8003b08:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	015b      	lsls	r3, r3, #5
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d107      	bne.n	8003b26 <UART_Start_Receive_IT+0x106>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a15      	ldr	r2, [pc, #84]	; (8003b78 <UART_Start_Receive_IT+0x158>)
 8003b22:	665a      	str	r2, [r3, #100]	; 0x64
 8003b24:	e002      	b.n	8003b2c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <UART_Start_Receive_IT+0x15c>)
 8003b2a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2274      	movs	r2, #116	; 0x74
 8003b30:	2100      	movs	r1, #0
 8003b32:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b34:	f3ef 8310 	mrs	r3, PRIMASK
 8003b38:	613b      	str	r3, [r7, #16]
  return(result);
 8003b3a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3e:	2301      	movs	r3, #1
 8003b40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f383 8810 	msr	PRIMASK, r3
}
 8003b48:	46c0      	nop			; (mov r8, r8)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2190      	movs	r1, #144	; 0x90
 8003b56:	0049      	lsls	r1, r1, #1
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f383 8810 	msr	PRIMASK, r3
}
 8003b66:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b00c      	add	sp, #48	; 0x30
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	000001ff 	.word	0x000001ff
 8003b78:	08003e31 	.word	0x08003e31
 8003b7c:	08003cc9 	.word	0x08003cc9

08003b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08e      	sub	sp, #56	; 0x38
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b88:	f3ef 8310 	mrs	r3, PRIMASK
 8003b8c:	617b      	str	r3, [r7, #20]
  return(result);
 8003b8e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
 8003b92:	2301      	movs	r3, #1
 8003b94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	f383 8810 	msr	PRIMASK, r3
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4925      	ldr	r1, [pc, #148]	; (8003c40 <UART_EndRxTransfer+0xc0>)
 8003baa:	400a      	ands	r2, r1
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	f383 8810 	msr	PRIMASK, r3
}
 8003bb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bba:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbe:	623b      	str	r3, [r7, #32]
  return(result);
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	f383 8810 	msr	PRIMASK, r3
}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2101      	movs	r1, #1
 8003bdc:	438a      	bics	r2, r1
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	f383 8810 	msr	PRIMASK, r3
}
 8003bea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d118      	bne.n	8003c26 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bfa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bfe:	2301      	movs	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f383 8810 	msr	PRIMASK, r3
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2110      	movs	r1, #16
 8003c16:	438a      	bics	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f383 8810 	msr	PRIMASK, r3
}
 8003c24:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b00e      	add	sp, #56	; 0x38
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	fffffedf 	.word	0xfffffedf

08003c44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	225a      	movs	r2, #90	; 0x5a
 8003c56:	2100      	movs	r1, #0
 8003c58:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2252      	movs	r2, #82	; 0x52
 8003c5e:	2100      	movs	r1, #0
 8003c60:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7ff fbaf 	bl	80033c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c80:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	2301      	movs	r3, #1
 8003c86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f383 8810 	msr	PRIMASK, r3
}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2140      	movs	r1, #64	; 0x40
 8003c9c:	438a      	bics	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f383 8810 	msr	PRIMASK, r3
}
 8003caa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7ff fb7c 	bl	80033b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b006      	add	sp, #24
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b090      	sub	sp, #64	; 0x40
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003cd0:	203e      	movs	r0, #62	; 0x3e
 8003cd2:	183b      	adds	r3, r7, r0
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	215c      	movs	r1, #92	; 0x5c
 8003cd8:	5a52      	ldrh	r2, [r2, r1]
 8003cda:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce0:	2b22      	cmp	r3, #34	; 0x22
 8003ce2:	d000      	beq.n	8003ce6 <UART_RxISR_8BIT+0x1e>
 8003ce4:	e095      	b.n	8003e12 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	213c      	movs	r1, #60	; 0x3c
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003cf0:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	183b      	adds	r3, r7, r0
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	b2d9      	uxtb	r1, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	400a      	ands	r2, r1
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0c:	1c5a      	adds	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	225a      	movs	r2, #90	; 0x5a
 8003d16:	5a9b      	ldrh	r3, [r3, r2]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b299      	uxth	r1, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	225a      	movs	r2, #90	; 0x5a
 8003d22:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	225a      	movs	r2, #90	; 0x5a
 8003d28:	5a9b      	ldrh	r3, [r3, r2]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d178      	bne.n	8003e22 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d30:	f3ef 8310 	mrs	r3, PRIMASK
 8003d34:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d36:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d38:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f383 8810 	msr	PRIMASK, r3
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4936      	ldr	r1, [pc, #216]	; (8003e2c <UART_RxISR_8BIT+0x164>)
 8003d52:	400a      	ands	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f383 8810 	msr	PRIMASK, r3
}
 8003d60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d62:	f3ef 8310 	mrs	r3, PRIMASK
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	f383 8810 	msr	PRIMASK, r3
}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2101      	movs	r1, #1
 8003d84:	438a      	bics	r2, r1
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	f383 8810 	msr	PRIMASK, r3
}
 8003d92:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d12f      	bne.n	8003e08 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dae:	f3ef 8310 	mrs	r3, PRIMASK
 8003db2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003db4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db6:	633b      	str	r3, [r7, #48]	; 0x30
 8003db8:	2301      	movs	r3, #1
 8003dba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f383 8810 	msr	PRIMASK, r3
}
 8003dc2:	46c0      	nop			; (mov r8, r8)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2110      	movs	r1, #16
 8003dd0:	438a      	bics	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	f383 8810 	msr	PRIMASK, r3
}
 8003dde:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	2210      	movs	r2, #16
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b10      	cmp	r3, #16
 8003dec:	d103      	bne.n	8003df6 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2210      	movs	r2, #16
 8003df4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2258      	movs	r2, #88	; 0x58
 8003dfa:	5a9a      	ldrh	r2, [r3, r2]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	0011      	movs	r1, r2
 8003e00:	0018      	movs	r0, r3
 8003e02:	f7ff fae9 	bl	80033d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e06:	e00c      	b.n	8003e22 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f7fc fcc8 	bl	80007a0 <HAL_UART_RxCpltCallback>
}
 8003e10:	e007      	b.n	8003e22 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699a      	ldr	r2, [r3, #24]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2108      	movs	r1, #8
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	619a      	str	r2, [r3, #24]
}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b010      	add	sp, #64	; 0x40
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	fffffedf 	.word	0xfffffedf

08003e30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b090      	sub	sp, #64	; 0x40
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003e38:	203e      	movs	r0, #62	; 0x3e
 8003e3a:	183b      	adds	r3, r7, r0
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	215c      	movs	r1, #92	; 0x5c
 8003e40:	5a52      	ldrh	r2, [r2, r1]
 8003e42:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e48:	2b22      	cmp	r3, #34	; 0x22
 8003e4a:	d000      	beq.n	8003e4e <UART_RxISR_16BIT+0x1e>
 8003e4c:	e095      	b.n	8003f7a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	213c      	movs	r1, #60	; 0x3c
 8003e54:	187b      	adds	r3, r7, r1
 8003e56:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003e58:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003e60:	187b      	adds	r3, r7, r1
 8003e62:	183a      	adds	r2, r7, r0
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	8812      	ldrh	r2, [r2, #0]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	1c9a      	adds	r2, r3, #2
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	225a      	movs	r2, #90	; 0x5a
 8003e7e:	5a9b      	ldrh	r3, [r3, r2]
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b299      	uxth	r1, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	225a      	movs	r2, #90	; 0x5a
 8003e8a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	225a      	movs	r2, #90	; 0x5a
 8003e90:	5a9b      	ldrh	r3, [r3, r2]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d178      	bne.n	8003f8a <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e98:	f3ef 8310 	mrs	r3, PRIMASK
 8003e9c:	617b      	str	r3, [r7, #20]
  return(result);
 8003e9e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	f383 8810 	msr	PRIMASK, r3
}
 8003eac:	46c0      	nop			; (mov r8, r8)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4936      	ldr	r1, [pc, #216]	; (8003f94 <UART_RxISR_16BIT+0x164>)
 8003eba:	400a      	ands	r2, r1
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	f383 8810 	msr	PRIMASK, r3
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eca:	f3ef 8310 	mrs	r3, PRIMASK
 8003ece:	623b      	str	r3, [r7, #32]
  return(result);
 8003ed0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	f383 8810 	msr	PRIMASK, r3
}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2101      	movs	r1, #1
 8003eec:	438a      	bics	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	f383 8810 	msr	PRIMASK, r3
}
 8003efa:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d12f      	bne.n	8003f70 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f16:	f3ef 8310 	mrs	r3, PRIMASK
 8003f1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f1c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f20:	2301      	movs	r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f383 8810 	msr	PRIMASK, r3
}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2110      	movs	r1, #16
 8003f38:	438a      	bics	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f383 8810 	msr	PRIMASK, r3
}
 8003f46:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	2210      	movs	r2, #16
 8003f50:	4013      	ands	r3, r2
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d103      	bne.n	8003f5e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2210      	movs	r2, #16
 8003f5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2258      	movs	r2, #88	; 0x58
 8003f62:	5a9a      	ldrh	r2, [r3, r2]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	0011      	movs	r1, r2
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7ff fa35 	bl	80033d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f6e:	e00c      	b.n	8003f8a <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	0018      	movs	r0, r3
 8003f74:	f7fc fc14 	bl	80007a0 <HAL_UART_RxCpltCallback>
}
 8003f78:	e007      	b.n	8003f8a <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699a      	ldr	r2, [r3, #24]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2108      	movs	r1, #8
 8003f86:	430a      	orrs	r2, r1
 8003f88:	619a      	str	r2, [r3, #24]
}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b010      	add	sp, #64	; 0x40
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	fffffedf 	.word	0xfffffedf

08003f98 <__libc_init_array>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	2600      	movs	r6, #0
 8003f9c:	4d0c      	ldr	r5, [pc, #48]	; (8003fd0 <__libc_init_array+0x38>)
 8003f9e:	4c0d      	ldr	r4, [pc, #52]	; (8003fd4 <__libc_init_array+0x3c>)
 8003fa0:	1b64      	subs	r4, r4, r5
 8003fa2:	10a4      	asrs	r4, r4, #2
 8003fa4:	42a6      	cmp	r6, r4
 8003fa6:	d109      	bne.n	8003fbc <__libc_init_array+0x24>
 8003fa8:	2600      	movs	r6, #0
 8003faa:	f000 f821 	bl	8003ff0 <_init>
 8003fae:	4d0a      	ldr	r5, [pc, #40]	; (8003fd8 <__libc_init_array+0x40>)
 8003fb0:	4c0a      	ldr	r4, [pc, #40]	; (8003fdc <__libc_init_array+0x44>)
 8003fb2:	1b64      	subs	r4, r4, r5
 8003fb4:	10a4      	asrs	r4, r4, #2
 8003fb6:	42a6      	cmp	r6, r4
 8003fb8:	d105      	bne.n	8003fc6 <__libc_init_array+0x2e>
 8003fba:	bd70      	pop	{r4, r5, r6, pc}
 8003fbc:	00b3      	lsls	r3, r6, #2
 8003fbe:	58eb      	ldr	r3, [r5, r3]
 8003fc0:	4798      	blx	r3
 8003fc2:	3601      	adds	r6, #1
 8003fc4:	e7ee      	b.n	8003fa4 <__libc_init_array+0xc>
 8003fc6:	00b3      	lsls	r3, r6, #2
 8003fc8:	58eb      	ldr	r3, [r5, r3]
 8003fca:	4798      	blx	r3
 8003fcc:	3601      	adds	r6, #1
 8003fce:	e7f2      	b.n	8003fb6 <__libc_init_array+0x1e>
 8003fd0:	08004040 	.word	0x08004040
 8003fd4:	08004040 	.word	0x08004040
 8003fd8:	08004040 	.word	0x08004040
 8003fdc:	08004044 	.word	0x08004044

08003fe0 <memset>:
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	1882      	adds	r2, r0, r2
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d100      	bne.n	8003fea <memset+0xa>
 8003fe8:	4770      	bx	lr
 8003fea:	7019      	strb	r1, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	e7f9      	b.n	8003fe4 <memset+0x4>

08003ff0 <_init>:
 8003ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff6:	bc08      	pop	{r3}
 8003ff8:	469e      	mov	lr, r3
 8003ffa:	4770      	bx	lr

08003ffc <_fini>:
 8003ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004002:	bc08      	pop	{r3}
 8004004:	469e      	mov	lr, r3
 8004006:	4770      	bx	lr
